To upgrade/update, write in terminal:

apt update -y && apt upgrade -y && apt dist-upgrade -y

[hat tip: Get Cyber (https://www.youtube.com/watch?v=_mvPASM89a0)

---------------------------------------------------------

In the command line prompt the presence of ~ represents that a user is now in their home directory.
------------------------------------------------

Linux File System
-----------------
* in Linux everything is treated as a file (including devices)
* files are case sensitive
* can contain up to 255 characters
* can contain any character (including whitespace) except /
* extensions are not needed/interpreted; they are only for user convenience

Every file is part of a path - the unique location of the file represented by alphanumeric names of parent directories and the file divided by /
The first / represents root directory and the following slashes delimit nested directories under root and finally the file.

[from: Linux Tutorials | The File System | GeeksforGeeks ; https://www.youtube.com/watch?v=JwgTeXfQdIg&list=PLqM7alHXFySFc4KtwEZTANgmyJm3NqS_L&index=5]

In the Linux FHS [File Hierarchy Structure/Filesystem Hierarchy Standard] all files are listed under root (/) even if they are found on different physical/virtual machines.
Only root (/) directory has no parent.
Only the root user can write to the root directory.
The root user's home directory is: /root (note: / != /root)

A "home directory" is the main repository for a user's file's (including their configuration file). When a user logs into a system, by default they usually start off in their home directory. [In the command line prompt the presence of ~ represents that a user is now in their home directory.]
As stated above: the root user's home directory is: /root.
Other users' home directories are by default created with the /home directory.

[from: Linux Tutorials | Linux Directory Structure | GeeksforGeeks ; https://www.youtube.com/watch?v=yWiUPWHljWg&list=PLqM7alHXFySFc4KtwEZTANgmyJm3NqS_L&index=6]

-------------------------------------------------------
Comparing Files
----------------
cmp - compares two files byte by byte to see if they are identical 
syntax: cmp <FIRST_FILENAME> <SECOND_FILENAME>
if there is a mismatch, the location of first instance of mismatch is identified by byte number and line number
if files are identical nothing happens; the terminal returns to the prompt

comm - compares two files that have already been sorted
syntax: comm <FIRST_FILENAME> <SECOND_FILENAME>
it displays three columns; the first column is lines unique to first file; the first column is lines unique to second file; the third column is lines identical in both files

diff - compares files and tells you which lines have to be changed in order to make files identical.
syntax: diff <FIRST_FILENAME> <SECOND_FILENAME>
The output uses the following symbols to instruct what steps to take to make the files identical:
* a - add
* c - change
* d - delete
The arrangement of the output on the terminal screen is confusing at first. See the video cited below where parsing the output is explained.

[from: Linux Tutorials | cmp, diff and comm commands | GeeksforGeeks ; https://www.youtube.com/watch?v=0k6obEKGTyk&list=PLqM7alHXFySFc4KtwEZTANgmyJm3NqS_L&index=19]
-------------------------------------------------------
tee - duplicates the output received from a command sending one stream to the terminal and the other into a file (requires pipe |)
syntax: <COMMAND> | tee <FILENAME>
example: ls | tee list_of_files_in_directory 
[from: Linux Tutorials | Pipe and tee | GeeksforGeeks ; https://www.youtube.com/watch?v=19mmVar-s5Y&list=PLqM7alHXFySFc4KtwEZTANgmyJm3NqS_L&index=21]
-------------------------------------------------------
In order to print lines in the middle of a file you can combine 'head' and 'tail' commands using the pipe (|) command. For example, if you wanted to print lines 5-10 of a 20 line file you would use the following command:
head -n 10 <FILENAME> | tail -n 6
The command first instructs the computer to pull the first 10 lines of the file; those ten lines are then piped into the tail command which instructs the computer to pull the last 6 lines of those 10 lines (i.e. lines 5-10) and print those last 6 lines.
[From: Linux Tutorials | Print line between M and N lines head and tail combined | GeeksforGeeks ; https://www.youtube.com/watch?v=tMXF-YKyP0w&list=PLqM7alHXFySFc4KtwEZTANgmyJm3NqS_L&index=23]
--------------------------------------------------------
For the 'sort' command, the -k [#] option tells the terminal which "column" to sort on (the default delimeter is a blank space; but you can use -d " " to tell it to sort on something else [e.g. -d "|" will tell it to treat each pipe as the divider between columns])
the -c command tells the terminal to check if the file is sorted and tell you wherever the sort is out of order
there is other important things in the video - check it out
[from: Linux Tutorials | sort command GeeksforGeeks ; https://www.youtube.com/watch?v=fEx5rnbDKO4&list=PLqM7alHXFySFc4KtwEZTANgmyJm3NqS_L&index=27]
---------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------------------------------------

Linux CLI
---------

Basics
------

------------------------------------------
Commands must be separated from arguments (e.g. -a) and file names by at least one space or tab; but multiple spaces or tabs is not a problem.
Multiple arguments can be combined in one dash (-) with no spaces, e.g. -l -a -c = -lac
You can run more than one command per line if you use a semicolon (;), e.g.:
> cd;pwd

The 'type' command will tell you where the script for a Linux CLI command (usually written in C language) is found (internal [in the shell itself] or external [in a file path]), for example:
> type ls
ls is hashed (/bin/ls)
> type cd
cd is a shell builtin

[hat tip: Linux Tutorials | Command Usage | GeeksforGeeks https://www.youtube.com/watch?v=L5_ZzpR9jaU&list=PLqM7alHXFySFc4KtwEZTANgmyJm3NqS_L&index=4]

You may be unable to use the backspace key in the terminal to correct a typo.
If you try Backspace you may get ^?. In order to fix typos, use the Delete key or CTRL-c.
If the line has many mistakes it may be easier to kill the whole line by pressing CTRL-U. This will erase the whole line and you can start over.
If a program is stuck in an infinite loop pressing Ctrl-c will stop the program and return to prompt.
Some commands that require an argument will also create a problem if one forgets to add the argument. For example, if you type 'cat' with no filename and press enter the terminal will move the cursor to the next line but no output or prompt will appear. Pressing CTRL-c or CTRL-d will bring back the prompt.
If the Enter key is not working try: CTRL-j or CTRL-m.
[hat tip: Linux Tutorials | Commands in Linux when things go wrong | GeeksforGeeks ; https://www.youtube.com/watch?v=7zG1RAVcrKM&list=PLqM7alHXFySFc4KtwEZTANgmyJm3NqS_L&index=9]

who - displays list of users currently logged on to the system and information about them (e.g. login time)
whoami - displays the name of the user logged into the terminal
uname - displays information about the OS (use -r to get version info too ; use -n to get host name)
tty - displays the filename of the terminal connected to stdin (standard input)
stty - is used to display current terminal line settings (how many lines are shown) and to change those settings
[hat tip: Linux Tutorials | About the user and the terminal | GeeksforGeeks ; https://www.youtube.com/watch?v=WnjofnvIIvg&list=PLqM7alHXFySFc4KtwEZTANgmyJm3NqS_L&index=11]

cal - prints calendar on the terminal
date - displays the current date and time
echo - prints given text on the terminal
printf - prints text in a formatted way on the terminal
[hat tip: Linux Tutorials | General Purpose Utilities | GeeksforGeeks ; https://www.youtube.com/watch?v=g6cPFj9ptdc&list=PLqM7alHXFySFc4KtwEZTANgmyJm3NqS_L&index=12]
-----------------------------------------

[hat tip: https://tryhackme.com/room/zeekbro]

View the command history:
ubuntu@ubuntu$ history

Execute the 10th command in history:
ubuntu@ubuntu$ !10

Execute the previous command:
ubuntu@ubuntu$ !!

Read File
---------
Read sample.txt file:
ubuntu@ubuntu$ cat sample.txt

Read the first 10 lines of the file:
ubuntu@ubuntu$ head sample.txt

Read the last 10 lines of the file:
ubuntu@ubuntu$ tail sample.txt

Find & Filter
-------------
Cut the 1st field:
ubuntu@ubuntu$ cat test.txt | cut -f 1

Cut the 1st column:
ubuntu@ubuntu$ cat test.txt | cut -c1

Filter specific keywords:
ubuntu@ubuntu$ cat test.txt | grep 'keywords'

Sort outputs alphabetically:
ubuntu@ubuntu$ cat test.txt | sort

Sort outputs numerically:
ubuntu@ubuntu$ cat test.txt | sort -n

Eliminate duplicate lines:
ubuntu@ubuntu$ cat test.txt | uniq

Count line numbers:
ubuntu@ubuntu$ cat test.txt | wc -l

Show line numbers
ubuntu@ubuntu$ cat test.txt | nl

Advanced
--------
Print line 11:
ubuntu@ubuntu$ cat test.txt | sed -n '11p'

Print lines between 10-15:
ubuntu@ubuntu$ cat test.txt | sed -n '10,15p'

Print lines below 11:
ubuntu@ubuntu$ cat test.txt | awk 'NR < 11 {print $0}'

Print line 11:
ubuntu@ubuntu$ cat test.txt | awk 'NR == 11 {print $0}'

Use Case	                                           Description
--------                                             ----------- 
sort | uniq                                     Remove duplicate values.

sort | uniq -c                                  Remove duplicates and count the number of occurrences for each value.

sort -nr                                        Sort values numerically and recursively.

rev                                             Reverse string characters.

cut -f 1                                        Cut field 1.

cut -d '.' -f 1-2                               Split the string on every dot and print keep the first two fields.

grep -v 'test'                                  Display lines that  don't match the "test" string.

grep -v -e 'test1' -e 'test2'                   Display lines that don't match one or both "test1" and "test2" strings.

file                                            View file information.

grep -rin Testvalue1 * | column -t | less -S    Search the "Testvalue1" string everywhere, organise column spaces and view the output with less.

[hat tip: https://tryhackme.com/room/zeekbro]
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Use case for "rev" command in Linux CLI:
The rev command reverses the text. So the word "hello" becomes "olleh".
In the TryHackMe room "Zeek Exercises" [https://tryhackme.com/room/zeekbroexercises ; Task 2, Question 3] it was necessary to find all the unique domain names in a file using the CLI.
The CLI can use the "uniq" command to list each unique domain.
The problem is that each domain appeared many times with various sub-domains of varying lengths and textual content. There could also have been sub-sub-domains delineated by ".". How does one tell the computer to only look at the domain and TLD when determing uniqueness?
The hint TryHackMe gave for this question used rev as part of the command. Basically, you reverse the text and then use "cut -d '.' -f 1-2" to pull out only the TLD and domain names. You have avoided the variability in the sub-domains and can be sure that you are only extracting the TLD and domain. Then you rev the data back into the proper order and list each unique occurence.
------------------------------------------------------------------------------------------------------------------------------------------------------------
Learning Linux CLI (aka Terminal aka Bash)
------------------------------------------
https://ubuntu.com/tutorials/command-line-for-beginners#1-overview
https://www.hackthebox.com/blog/learn-linux
https://www.freecodecamp.org/news/the-linux-commands-handbook/
[hat tip: https://www.reddit.com/r/tryhackme -- WRWhizard]
-------------------------------------------------------------------------------------------------------------------------------------------------------------
https://linuxcommand.org/index.php
https://overthewire.org/wargames/
[hat tip: https://niiconsulting.com/checkmate/2017/06/a-detail-guide-on-oscp-preparation-from-newbie-to-oscp/]
-------------------------------------------------------------------------------------------------------------------------------------------------------------

How to interpret the /etc/passwd file
-------------------------------------
Credit: https://linuxize.com/post/etc-passwd-file/ --
There are several different authentication schemes that can be used on Linux systems. The most commonly used and standard scheme is to perform authentication against the /etc/passwd and /etc/shadow files.

/etc/passwd is a plain text-based database that contains information for all user accounts on the system. It is owned by root and has 644 permissions . The file can only be modified by root or users with sudo privileges and readable by all system users.

Modifying the /etc/passwd file by hand should be avoided unless you know what you are doing. Always use a command that is designed for the purpose. For example, to modify a user account, use the usermod command, and to add a new user account use the useradd command.

/etc/passwd Format
The /etc/passwd file is a text file with one entry per line, representing a user account. To view the contents of the file, use a text editor or a command such as cat: $ cat /etc/passwd

Usually, the first line describes the root user, followed by the system and normal user accounts. New entries are appended at the end of the file.

Each line of the /etc/passwd file contains seven comma-separated fields:

Output
mark:x:1001:1001:mark,,,:/home/mark:/bin/bash
[--] - [--] [--] [-----] [--------] [--------]
|    |   |    |     |         |        |
|    |   |    |     |         |        +-> 7. Login shell
|    |   |    |     |         +----------> 6. Home directory
|    |   |    |     +--------------------> 5. GECOS
|    |   |    +--------------------------> 4. GID
|    |   +-------------------------------> 3. UID
|    +-----------------------------------> 2. Password
+----------------------------------------> 1. Username

01. Username. The string you type when you log into the system. Each username must be a unique string on the machine. The maximum length of the username is restricted to 32 characters.
02. Password. In older Linux systems, the user’s encrypted password was stored in the /etc/passwd file. On most modern systems, this field is set to x, and the user password is stored in the /etc/shadow file.
03. UID. The user identifier is a number assigned to each user. It is used by the operating system to refer to a user.
04. GID. The user’s group identifier number, referring to the user’s primary group. When a user creates a file , the file’s group is set to this group. Typically, the name of the group is the same as the name of the user. User’s secondary groups are listed in the /etc/groups file.
05. GECOS or the full name of the user. This field contains a list of comma-separated values with the following information:
User’s full name or the application name.
 - Room number.
 - Work phone number.
 - Home phone number.
 - Other contact information.
06. Home directory. The absolute path to the user’s home directory. It contains the user’s files and configurations. By default, the user home directories are named after the name of the user and created under the /home directory.
07. Login shell. The absolute path to the user’s login shell. This is the shell that is started when the user logs into the system. On most Linux distributions, the default login shell is Bash.
--Credit: https://linuxize.com/post/etc-passwd-file/
--------------------------------------------------------------------------------------------------------------------------------------------------------
Explain Shell
https://explainshell.com/
"write down a command-line to see the help text that matches each argument"
[hat tip: https://fosspost.org/linux-command-line-basics-examples/
"How To Know What a Linux Command Does?
Since you are a new user, you may see many people passing different Linux commands on the Internet that may do different tasks. But how can you understand what these commands will do on your system if you apply them?
ExplainShell.com is the answer.
Let’s say that you encountered a very long command while browsing an online article or a book, and you didn’t know what does it do and how? Just paste it into the website and it will tell you what each part of it does. It’s an amazing online website to explain Linux commands.]
--------------------------------------------------------------------------------------------------------------------------------------------------------
From: https://flashpoint.io/blog/osint-tools-library/

Manipulate datasets from Terminal
OSINT practitioners frequently run across TXT and CSV files. Often, the formatting for CSV files is not compatible with your investigation and you need to remove certain columns, add others, change column titles, etc. If you’re looking to remove all columns except for a select few, use this trick:

$ cut -d, -f<column number> --complement input.csv > output.csv

Example:

$ cut -d, -f4 --complement osint.csv > oshint.csv

This will remove the fourth column of osint.csv and save it to oshint.csv. If you remove [the] --complement [argument], you’ll remove all columns except for column 4.

To learn more about this Linux command, check out: https://linuxconfig.org/how-to-remove-columns-from-csv-based-on-column-number-using-bash-shell
--------------------------------------------------------------------------------------------------------------------------------------------------------
From: https://medium.com/@halil_tek/the-most-important-linux-commands-that-nobody-teaches-you-1b6919860c8f (with edits ; note: only some of the commands mntioned in the article are copied here)

rsync
-----
Used to copy files and directories to a destination, similar to the cp command. However, it also allows copying to remote locations and can provide a progress bar, as is often used for backups

# Example Usage
$ rsync -vap --ignore-existing <source_file> <destination_file>#  Key flags:
v = verbose, r = recursive, p = preserve permissions, g = group, o = owner, a = archive, --progress = progresss bar


mkpasswd
--------
mkpasswd is a simple but very useful command, it generates a complex random password at the specified length.

$ mkpasswd -l 8
> iwF1g2Lo

screen
-------
Screen is a full-screen window manager; it creates a single window with a shell running and allows multiple screen windows to run inside a single session. It’s most beneficial when you’re running a long task remotely and worried about your SSH session dropping and ruining everything. Screen will continue through disconnection and continue to run your commands even when the window is not visible to you.

# Example Usage
$ screen # Start a screen session
$ screen -ls # List running services
$ screen -r # Attach to session

diff
-----
Diff the Output of any two commands
# Example usage of comparing output of two ls commands$ diff -u <(ls -l /directory/) <(ls -l /directory/) | colordiff

date -d
--------
Convert a Unix (Epoch) timestamp to human-readable format
# Convert Unix timestamp to human readable
$ date -d 1656685875
Fri, 01 Jul 2022 14:31:15 +0000
# Current time as UNIX timestamp
$ date "+%s"
-------------------------------------------------------
Unix Epoch time

"Unix time is a date and time representation widely used in computing. It measures time by the number of seconds that have elapsed since 00:00:00 UTC on 1 January 1970, the beginning of the Unix epoch, less adjustments made due to leap seconds. Unix time originated as the system time of Unix operating systems." (Wikipedia)

Epoch Converter
https://www.epochconverter.com/
Epoch & Unix Timestamp [Online] Conversion Tools

"What is epoch time?
The Unix epoch (or Unix time or POSIX time or Unix timestamp) is the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds (in ISO 8601: 1970-01-01T00:00:00Z). Literally speaking the epoch is Unix time 0 (midnight 1/1/1970), but 'epoch' is often used as a synonym for Unix time. Some systems store epoch dates as a signed 32-bit integer, which might cause problems on January 19, 2038 (known as the Year 2038 problem or Y2038). The converter on this page converts timestamps in seconds (10-digit), milliseconds (13-digit) and microseconds (16-digit) to readable dates.

Human-readable time 	Seconds
1 hour	3600 seconds
1 day	86400 seconds
1 week	604800 seconds
1 month (30.44 days) 	2629743 seconds
1 year (365.24 days) 	 31556926 seconds
How to get the current epoch time in ...
PHP	time() More PHP
Python	import time; time.time() Source
Ruby	Time.now (or Time.new). To display the epoch: Time.now.to_i
Perl	time More Perl
Java	long epoch = System.currentTimeMillis()/1000; Returns epoch in seconds.
C#	DateTimeOffset.Now.ToUnixTimeSeconds() (.NET Framework 4.6+/.NET Core), older versions: var epoch = (DateTime.UtcNow - new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalSeconds;
Objective-C	[[NSDate date] timeIntervalSince1970]; (returns double) or NSString *currentTimestamp = [NSString stringWithFormat:@"%f", [[NSDate date] timeIntervalSince1970]];
C++11	double now = std::chrono::duration_cast<std::chrono::seconds>(std::chrono::system_clock::now().time_since_epoch()).count();
Lua	epoch = os.time([date])
VBScript/ASP	See the examples
AutoIT	_DateDiff('s', "1970/01/01 00:00:00", _NowCalc())
Delphi	Epoch := DateTimetoUnix(Now); Tested in Delphi 2010.
R	as.numeric(Sys.time())
Erlang/OTP	erlang:system_time(seconds). (version 18+), older versions: calendar:datetime_to_gregorian_seconds(calendar:universal_time())-719528*24*3600.
MySQL	SELECT unix_timestamp(now()) More MySQL examples
PostgreSQL	SELECT extract(epoch FROM now());
SQLite	SELECT strftime('%s', 'now');
Oracle PL/SQL	SELECT (CAST(SYS_EXTRACT_UTC(SYSTIMESTAMP) AS DATE) - TO_DATE('01/01/1970','DD/MM/YYYY')) * 24 * 60 * 60 FROM DUAL;
SQL Server	SELECT DATEDIFF(s, '1970-01-01 00:00:00', GETUTCDATE())
IBM Informix	SELECT dbinfo('utc_current') FROM sysmaster:sysdual;
JavaScript	Math.floor(new Date().getTime()/1000.0) The getTime method returns the time in milliseconds.
Visual FoxPro	DATETIME() - {^1970/01/01 00:00:00} Warning: time zones not handled correctly
Go	time.Now().Unix() More Go 
Adobe ColdFusion	<cfset epochTime = left(getTickcount(), 10)>
Tcl/Tk	clock seconds
Unix/Linux Shell	date +%s
Solaris	/usr/bin/nawk 'BEGIN {print srand()}' Solaris doesn't support date +%s, but the default seed value for nawk's random-number generator is the number of seconds since the epoch.
PowerShell	[int][double]::Parse((Get-Date (get-date).touniversaltime() -UFormat %s))
Other OS's	Command line: perl -e "print time" (If Perl is installed on your system)

Convert from human-readable date to epoch
PHP	strtotime("15 November 2018") (converts most English date texts) or:
date_create('11/15/2018')->format('U') (using DateTime class) More PHP
Python	import calendar, time; calendar.timegm(time.strptime('2000-01-01 12:34:00', '%Y-%m-%d %H:%M:%S'))
Ruby	Time.local(year, month, day, hour, minute, second, usec ) (or Time.gm for GMT/UTC input). To display add .to_i
Perl	Use the Perl Epoch routines
Java	long epoch = new java.text.SimpleDateFormat("MM/dd/yyyy HH:mm:ss").parse("01/01/1970 01:00:00").getTime() / 1000; Timestamp in seconds, remove '/1000' for milliseconds.
VBScript/ASP	DateDiff("s", "01/01/1970 00:00:00", time field) More ASP
AutoIT	_DateDiff('s', "1970/01/01 00:00:00", "YYYY/MM/DD HH:MM:SS")
Delphi	Epoch := DateTimeToUnix(StrToDateTime(myString));
C	Use the C Epoch Converter routines
R	as.numeric(as.POSIXct("YYYY-MM-dd HH:mm:ss", tz = "GMT", origin="1970-01-01")) The origin parameter is optional
Go	Example code 
Rust	SystemTime::now().duration_since(SystemTime::UNIX_EPOCH) 
Adobe ColdFusion	int(parseDateTime(datetime).getTime()/1000);
MySQL	SELECT unix_timestamp(time) Time format: YYYY-MM-DD HH:MM:SS or YYMMDD or YYYYMMDD
More on using Epoch timestamps with MySQL
PostgreSQL	SELECT extract(epoch FROM date('2000-01-01 12:34'));
With timestamp: SELECT EXTRACT(EPOCH FROM TIMESTAMP WITH TIME ZONE '2018-02-16 20:38:40-08');
With interval: SELECT EXTRACT(EPOCH FROM INTERVAL '5 days 3 hours');
SQLite	SELECT strftime('%s',timestring);
SQL Server	SELECT DATEDIFF(s, '1970-01-01 00:00:00', time field)
JavaScript	Use the JavaScript Date object
Unix/Linux Shell	date +%s -d"Jan 1, 1980 00:00:01" Replace '-d' with '-ud' to input in GMT/UTC time.
Convert from epoch to human-readable date
PHP	date(output format, epoch); Output format example: 'r' = RFC 2822 date, more PHP examples
Python	import time; time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.localtime(epoch)) Replace time.localtime with time.gmtime for GMT time. Or using datetime: import datetime; datetime.datetime.utcfromtimestamp(epoch).replace(tzinfo=datetime.timezone.utc)
Ruby	Time.at(epoch)
C#	private string epoch2string(int epoch) {
return new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(epoch).ToShortDateString(); }
Perl	Use the Perl Epoch routines
Java	String date = new java.text.SimpleDateFormat("MM/dd/yyyy HH:mm:ss").format(new java.util.Date (epoch*1000)); Epoch in seconds, remove '*1000' for milliseconds.
Lua	datestring = os.date([format[,epoch]])
VBScript/ASP	DateAdd("s", epoch, "01/01/1970 00:00:00") More ASP
AutoIT	_DateAdd("s", $EpochSeconds , "1970/01/01 00:00:00")
Delphi	myString := DateTimeToStr(UnixToDateTime(Epoch)); Where Epoch is a signed integer.
C	Use the C Epoch Converter routines
Objective-C	NSDate * myDate = [NSDate dateWithTimeIntervalSince1970:epoch]; NSLog(@"%@", date);
R	as.POSIXct(epoch, origin="1970-01-01", tz="GMT")
Go	Example code 
Adobe ColdFusion	DateAdd("s",epoch,"1/1/1970");
MySQL	FROM_UNIXTIME(epoch, optional output format) Default output format is YYY-MM-DD HH:MM:SS. If you need support for negative timestamps: DATE_FORMAT(DATE_ADD(FROM_UNIXTIME(0), interval -315619200 second),"%Y-%m-%d") (replace -315619200 with epoch) More MySQL
PostgreSQL	PostgreSQL version 8.1 and higher: SELECT to_timestamp(epoch); Source Older versions: SELECT TIMESTAMP WITH TIME ZONE 'epoch' + epoch * INTERVAL '1 second';
SQLite	SELECT datetime(epoch_to_convert, 'unixepoch'); or local timezone: SELECT datetime(epoch_to_convert, 'unixepoch', 'localtime');
Oracle PL/SQL	SELECT to_date('01-JAN-1970','dd-mon-yyyy')+(1526357743/60/60/24) from dual
Replace 1526357743 with epoch.
SQL Server	DATEADD(s, epoch, '1970-01-01 00:00:00')
IBM Informix	SELECT dbinfo('utc_to_datetime',epoch) FROM sysmaster:sysdual;
Microsoft Excel / LibreOffice Calc	=(A1 / 86400) + 25569 Format the result cell for date/time, the result will be in GMT time (A1 is the cell with the epoch number). For other time zones: =((A1 +/- time zone adjustment) / 86400) + 25569.
Crystal Reports	DateAdd("s", {EpochTimeStampField}-14400, #1/1/1970 00:00:00#) -14400 used for Eastern Standard Time. See Time Zones.
JavaScript	Use the JavaScript Date object
Tcl/Tk	clock format 1325376000 Documentation
MATLAB	datestr(719529+TimeInSeconds/86400,'dd-mmm-yyyy HH:MM:SS')
IBM PureData System for Analytics	select 996673954::int4::abstime::timestamp;
Unix/Linux Shell	date -d @1520000000 Replace 1520000000 with your epoch, needs recent version of 'date'. Replace '-d' with '-ud' for GMT/UTC time.
Mac OS X	date -j -r 1520000000
PowerShell	Function get-epochDate ($epochDate) { [timezone]::CurrentTimeZone.ToLocalTime(([datetime]'1/1/1970').AddSeconds($epochDate)) }, then use: get-epochDate 1520000000. Works for Windows PowerShell v1 and v2
Other OS's	Command line: perl -e "print scalar(localtime(epoch))" (If Perl is installed) Replace 'localtime' with 'gmtime' for GMT/U"
[from: https://www.epochconverter.com/]
--------------------------------------------------------------------------------------------------------------------------------------------------------
Introduction to Named Pipes
https://www.linuxjournal.com/article/2156
