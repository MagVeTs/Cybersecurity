miscellaneous
--------------




------------------------------------------------------------------------------
Default Passwords by Product Name:
https://cirt.net/passwords
https://default-password.info/
https://datarecovery.com/rd/default-passwords/
[hat tip: https://tryhackme.com/room/passwordattacks - Task 3]
------------------------------------------------------------------------------
Lists of commonly used/weak passwords:
https://wiki.skullsecurity.org/index.php?title=Passwords
https://github.com/danielmiessler/SecLists/tree/master/Passwords
[hat tip: https://tryhackme.com/room/passwordattacks - Task 3]
------------------------------------------------------------------------------
Lists of leaked passwords:
https://github.com/danielmiessler/SecLists/tree/master/Passwords/Leaked-Databases
[hat tip: https://tryhackme.com/room/passwordattacks - Task 3]
------------------------------------------------------------------------------
How to prep password lists for use by combining multiple lists and removing duplicates:
> cat list1.txt list2.txt list3.txt > aggregated_list.txt
> sort aggregated_list.txt | uniq -u > deduplicated_aggregated_list.txt
[hat tip: https://tryhackme.com/room/passwordattacks - Task 3]
------------------------------------------------------------------------------
It is worthwhile to create a custom list for a company. The cewl tool will crawl and scrape a company's website and pull strings that fit certain criteria and generate a wordlist for brute forcing based on those strings.
example syntax:
> cewl -w list.txt -d 5 -m 5 http://thm.labs
`-w` - output file
`-d` - minimum string length
`-m` - webcrawling/spidering depth level (2 is default)
`http://thm.labs` - url to search
----------------------------------------------------------------------------
Employ the tool `username_generator` to create a list of possible usernames to brutefore. One supplies employee names and `username_generator` produces a list that combines them in many different ways.
example: John Smith, becomes:
johnsmith
smithjohn
jsmith
josmith
smithj
john_smith
smith_john
etc.
syntax:
> git clone https://github.com/therodri2/username_generator.git
> cd username_generator
> python3 username_generator.py -h [shows help message and arguments]
> echo "John Smith" > users.txt
> python3 username_generator.py -w users.txt
----------------------------------------------------------------------------
Crunch
------
Employ the tool `crunch` to generate all possible random combinations of designated letters/numbers/symbols in order to use them in a brute force attack:
syntax:
crunch -h 
help screen

crunch 2 2 01234abcd -o crunch.txt
generates "words" of minimum 2 characters and maximum 2 characters using all possible combinations of the following numbers/letters: 01234abcd Output is written to crunch.txt file.

crunch also lets us specify a character set using the -t option to combine words of our choice. Here are some of the other options that could be used to help create different combinations of your choice:

@ - lower case alpha characters

, - upper case alpha characters

% - numeric characters

^ - special characters including space
For example, if part of the password is known to us, and we know it starts with pass and is followed by two numbers, we can use the % symbol from above to match the numbers. Here we generate a wordlist that contains "pass" followed by 2 numbers:
crunch 6 6 -t pass%%
[From: https://tryhackme.com/room/passwordattacks ; Task 4 ; with editing, etc.]
---------------------------------------------------------------------------------------------------
CUPP - Common User Passwords Profiler
------------------
Python tool for creating custom wordlists to brute force from. The wordlists are created based on information you supply regarding the user. There is a 1337/leet mode option which will replace letters wiyh leetspeak numbers and characters.
The git repository is here: https://github.com/Mebus/cupp.
syntax:
> git clone https://github.com/Mebus/cupp.git
change to the CUPP directory and run:
> python3 cupp.py
[add -h for help page]
> python3 cupp.py -i
interactive mode where you fill in info about user; press enter to skip fields you do not know the answer to
> python3 cupp.py -l
see and choose from a list of custom wordlists that can be chosen; e.g. languages (japanese, yiddish, italian) or subjects (literature, music, movieTV)
> python3 cupp.py -a
pull a list of default usernames/passwords from the Alecto database
[From: https://tryhackme.com/room/passwordattacks ; Task 4 ; with editing, etc.]
-------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------
From: https://tryhackme.com/room/passwordattacks ; Task 9 - Password Spray Attacks [with edits, etc.]

Difference between brute-force attack and password spray attack:
* brute-force - test many common/predictable passwords against one username
* password spraying - test one common/predictable password against many usernames
Note: password spraying attacks are less likely than brute-force attacks to trigger account lockouts

Common and weak passwords often follow a pattern and format, e.g.

* SeasonYear (e.g. Fall2020)
* MonthYear (e.g. November2020)
* CompanyNameRandomNumbers (e.g. TryHackMe01)
Note: If a password complexity policy is enforced within the organization, we may need to create a password that includes symbols to fulfill the requirement, such as October2021!, Spring2021!, October2021@, etc.
Note: For better success in a password spraying attack, first enumerate the target and gather OSINT to compile a list of valid usernames/email addresses.

Tools for password spraying at various services:
* hydra [sample syntax: hydra -L usernames-list.txt -p Spring2021 ssh://10.1.1.10]
* https://github.com/xFreed0m/RDPassSpray - against RDP [sample syntax: python3 RDPassSpray.py -U usernames-list.txt -p Spring2021! -t 10.100.10.240:3026]
* Metasploit (auxiliary/scanner/smb/smb_login) - against smb
* https://github.com/blacklanternsecurity/TREVORspray 
TREVORspray is a modular password sprayer with threading, clever proxying, loot modules, and more!
* https://github.com/knavesec/CredMaster
Launch a password spray / brute force attach via Amazon AWS passthrough proxies, shifting the requesting IP address for every authentication attempt. This dynamically creates FireProx APIs for more evasive password sprays.
* https://github.com/dafthack/MailSniper
MailSniper is a penetration testing tool for searching through email in a Microsoft Exchange environment for specific terms (passwords, insider intel, network architecture information, etc.). It can be used as a non-administrative user to search their own email or by an Exchange administrator to search the mailboxes of every user in a domain.
MailSniper also includes additional modules for password spraying, enumerating users and domains, gathering the Global Address List (GAL) from OWA and EWS and checking mailbox permissions for every Exchange user at an organization.
-----------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------
Heath Adams - The Cyber Mentor
Practical Ethical Hacking - The Complete Course
"Pass Attacks" - https://academy.tcm-sec.com/courses/1152300/lectures/48489919

HA says that pass-the-hash attacks work for NTLMv1; not NTLMv2. NTLMv2 works for relay attacks.
-----------------------------------------------------------------------------------------------------------------
from: Heath Adams - The Cyber Mentor ; Practical Ethical Hacking - The Complete Course ; https://academy.tcm-sec.com/courses/1152300/lectures/48489922
When CRACKING an NTLM hash you only need the NT part (given AFTER the colon) not the LM part (given BEFORE the colon)
------------------------------------------------------------------------------------------------------------------
https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html



----------------------------------------------------------
Subresource Integrity Hash [see here: https://tryhackme.com/room/owasptop102021 ; Task 19 - Software Integrity Failures]
https://www.srihash.org/
"SRI is a new W3C specification that allows web developers to ensure that resources hosted on third-party servers have not been tampered with. Use of SRI is recommended as a best-practice, whenever libraries are loaded from a third-party source."

--------------------------------------------------------
From: https://tryhackme.com/room/encryptioncrypto101 ; Task 6 -  RSA - Rivest Shamir Adleman [with some editing, changes, and additions]

The math(s) side
RSA is based on the mathematically difficult problem of working out the factors of a large number. It’s very quick to multiply two prime numbers together, say 17*23 = 391, but it’s quite difficult to work out what two prime numbers multiply together to make 14351 (113x127 for reference).

The attacking side

The maths behind RSA seems to come up relatively often in CTFs, normally requiring you to calculate variables or break some encryption based on them. The Wikipedia page (https://en.wikipedia.org/wiki/RSA_(cryptosystem)) for RSA seems complicated at first, but will give you almost all of the information you need in order to complete challenges.

There are some excellent tools for defeating RSA challenges in CTFs, and my personal favorite is https://github.com/Ganapati/RsaCtfTool which has worked very well for me. I’ve also had some success with https://github.com/ius/rsatool.

The key variables that you need to know about for RSA in CTFs are p, q, m, n, e, d, and c.

“p” and “q” are large prime numbers, “n” is the product of p and q (i.e. the result of multiplying p*q).

The public key is n and e, the private key is n and d.

“m” is used to represent the message (in plaintext) and “c” represents the ciphertext (encrypted text).

CTFs involving RSA
Crypto CTF challenges often present you with a set of these values, and you need to break the encryption and decrypt a message to retrieve the flag.

There’s a lot more maths to RSA, and it gets quite complicated fairly quickly. If you want to learn the maths behind it, I recommend reading MuirlandOracle’s blog post here: https://muirlandoracle.co.uk/2020/01/29/rsa-encryption/.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

