Cryptography and Hashes
-----------------------
Tools for encrypting and decrypting and hashing:

* GNU_Privacy_Guard - see: tools/GNU_Privacy_Guard in this repository



* Checking hashes in Linux Terminal [from: https://tryhackme.com/room/owasptop102021 ; task 18]
$ md5sum <NAME_OF_FILE>
$ sha1sum <NAME_OF_FILE>
$ sha256sum <NAME_OF_FILE>



* Subresource Integrity Hash [see here: https://tryhackme.com/room/owasptop102021 ; Task 19 - Software Integrity Failures]
https://www.srihash.org/
"SRI is a new W3C specification that allows web developers to ensure that resources hosted on third-party servers have not been tampered with. Use of SRI is recommended as a best-practice, whenever libraries are loaded from a third-party source."

--------------------------------------------------------
From: https://tryhackme.com/room/encryptioncrypto101 ; Task 6 -  RSA - Rivest Shamir Adleman [with some editing, changes, and additions]

The math(s) side
RSA is based on the mathematically difficult problem of working out the factors of a large number. It’s very quick to multiply two prime numbers together, say 17*23 = 391, but it’s quite difficult to work out what two prime numbers multiply together to make 14351 (113x127 for reference).

The attacking side

The maths behind RSA seems to come up relatively often in CTFs, normally requiring you to calculate variables or break some encryption based on them. The Wikipedia page (https://en.wikipedia.org/wiki/RSA_(cryptosystem)) for RSA seems complicated at first, but will give you almost all of the information you need in order to complete challenges.

There are some excellent tools for defeating RSA challenges in CTFs, and my personal favorite is https://github.com/Ganapati/RsaCtfTool which has worked very well for me. I’ve also had some success with https://github.com/ius/rsatool.

The key variables that you need to know about for RSA in CTFs are p, q, m, n, e, d, and c.

“p” and “q” are large prime numbers, “n” is the product of p and q (i.e. the result of multiplying p*q).

The public key is n and e, the private key is n and d.

“m” is used to represent the message (in plaintext) and “c” represents the ciphertext (encrypted text).

CTFs involving RSA
Crypto CTF challenges often present you with a set of these values, and you need to break the encryption and decrypt a message to retrieve the flag.

There’s a lot more maths to RSA, and it gets quite complicated fairly quickly. If you want to learn the maths behind it, I recommend reading MuirlandOracle’s blog post here: https://muirlandoracle.co.uk/2020/01/29/rsa-encryption/.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------


