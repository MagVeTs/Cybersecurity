Regular Expressions (regex)
---------------------------

RegExr
https://regexr.com/
"RegExr is an online tool to learn, build, & test Regular Expressions (RegEx / RegExp)."
"Results update in real-time as you type.
Roll over a match or expression for details.
Validate patterns with suites of Tests.
Save & share expressions with others.
Use Tools to explore your results.
Full RegEx Reference with help & examples."


https://www.rexegg.com/regex-quickstart.html#chars
"Quick-Start: Regex Cheat Sheet"
[hat tip: TryHackMe]

-------------------------------------
from: https://tryhackme.com/room/introtologanalysis ; Task 7 - " Log Analysis Tools: Regular Expressions"

$ grep -E 'post=1[0-9]' apache-ex2.log
# in this use case we are dealing with a log containing this type of entry:
# 203.0.113.1 - - [02/Aug/2023:10:15:23 +0000] "GET /blog.php?post=12 HTTP/1.1" 200 - "Mozilla/5.0"
# blog posts are identified by ID numbers as found, in this example, to be 12 (i.e. post=12)
# we want to grep all blog post entries between 10 and 19
# -E = search for a pattern as opposed to a grep search for a string which is without the -E (another option is to use the command `egrep` which defaults to a pattern search
# the `post=` section is a string (strings and patterns can be searched for together)
# 1[0-9] = this is the regex pattern that is being sought; in this case the pattern is a two digit number whose first digit is 1 and whose second digit is either 0,1,2,3,4,5,6,7,8, or 9; any line from the log that contains  # the string `post=` immediately followed by a number that matches the pattern will be displayed


Example regex used to find all IP addresses in a file:
\b([0-9]{1,3}\.){3}[0-9]{1,3}\b
# \b = opening word boundary anchor; ensures the match is on a FULL IP address
# [0-9]{1,3} = match a 1, 2, or 3 digit number; each digit may be between 0-9; this pattern will return any number between 0-999
# NOTE: even though IPv4 addresses octets are always between 1-255, using the simpler pattern employed here will also accomplish the goal of retrieving all IP addresses
# \. = escapes interpreting the `.` as part of the pattern command; instead the `.` is treated as a literal and searched for
# {3} = commands that the previous "capturing group" ([0-9]{1,3}\.) will repeat 3 times as part of the sought pattern
# [0-9]{1,3} - match a 1, 2, or 3 digit number; each digit may be between 0-9; this pattern will return any number between 0-999; this is for the 4th octet in the IP address
# \b= closing word boundary anchor; ensures the match is on a FULL IP address
-------------------------------------

from: https://tryhackme.com/room/catregex - Regular Expressions

the basic syntax for regex is:
$ egrep <pattern> <file> 
# NOTE: `egrep` <pattern> <file>` is the equivalent of `grep -E <pattern> <file>`

When you are looking for an exact string of text you use: grep '<string>' <file>; but when you are trying to retrieve all lines that match a certain pattern (e.g. all IP addresses) you use regex and use either `grep -E` or `egrep` and then the regex pattern.
The patterns as expressed using regex are called "charsets" and are defined using square brackets: [ ]

[abc] will match a, b, and c (every occurrence of each letter)

[abc]zz will match azz, bzz, and czz.

You can also use a - dash to define ranges:
[a-c]zz is the same as above.

And then you can combine ranges together:
[a-cx-z]zz will match azz, bzz, czz, xzz, yzz, and zzz.

Most notably, this can be used to match any alphabetical character:
[a-zA-Z] will match any single letter (lowercase or uppercase).

You can use numbers too:
file[1-3] will match file1, file2, and file3.

Then, there is a way to exclude characters from a charset with the ^ hat symbol, and include everything else.
[^k]ing will match ring, sing, $ing, but not king.

Of course, you can exclude charsets, not just single characters.
[^a-c]at will match fat and hat, but not bat or cat.

Note 1: Don't confuse strings with charsets. The charset [abc] will match the string abc, but also cba and ca. It doesn't match the string, but rather every occurrence of the specified characters in that string.







