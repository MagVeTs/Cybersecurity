Regular Expressions (regex)
---------------------------

RegExr
https://regexr.com/
"RegExr is an online tool to learn, build, & test Regular Expressions (RegEx / RegExp)."
"Results update in real-time as you type.
Roll over a match or expression for details.
Validate patterns with suites of Tests.
Save & share expressions with others.
Use Tools to explore your results.
Full RegEx Reference with help & examples."


https://www.rexegg.com/regex-quickstart.html#chars
"Quick-Start: Regex Cheat Sheet"
[hat tip: TryHackMe]

-------------------------------------
from: https://tryhackme.com/room/introtologanalysis ; Task 7 - " Log Analysis Tools: Regular Expressions"

$ grep -E 'post=1[0-9]' apache-ex2.log
# in this use case we are dealing with a log containing this type of entry:
# 203.0.113.1 - - [02/Aug/2023:10:15:23 +0000] "GET /blog.php?post=12 HTTP/1.1" 200 - "Mozilla/5.0"
# blog posts are identified by ID numbers as found, in this example, to be 12 (i.e. post=12)
# we want to grep all blog post entries between 10 and 19
# -E = search for a pattern as opposed to a grep search for a string which is without the -E (another option is to use the command `egrep` which defaults to a pattern search
# the `post=` section is a string (strings and patterns can be searched for together)
# 1[0-9] = this is the regex pattern that is being sought; in this case the pattern is a two digit number whose first digit is 1 and whose second digit is either 0,1,2,3,4,5,6,7,8, or 9; any line from the log that contains  # the string `post=` immediately followed by a number that matches the pattern will be displayed

https://tryhackme.com/room/catregex - Regular Expressions
