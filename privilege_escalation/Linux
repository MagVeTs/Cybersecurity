-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Recommended TryHackMe rooms:

https://tryhackme.com/room/vulnversity ; Task 5 - Privilege Escalation
"In Linux, SUID (set owner userId upon execution) is a special type of file permission given to a file. SUID gives temporary permissions to a user to run the program/file with the permission of the file owner (rather than the user who runs it).
For example, the binary file to change your password has the SUID bit set on it (/usr/bin/passwd). This is because to change your password, it will need to write to the shadowers file that you do not have access to, root does, so it has root privileges to make the right changes."

https://tryhackme.com/room/kenobi ; Task 4 - Privilege Escalation with Path Variable Manipulation

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
From: https://unicornsec.com/home/tryhackme-vulnversity
"Privilege Escalation
[After] we have a remote shell on our target the next step is to try to escalate our privileges to root. A common technique for privesc when doing CTFs or online challenges like this is to look for files that have the SUID bit set. 

So how do we find SUID files on our target?

find / -perm /4000 2>&1 | grep -v “Permission denied”

find /: calls the built-in find utility and starts looking at the root “/” directory

-perm: Any  of the permission bits are set for the file

/4000: the numerical value for files that have the SUID bit

2>&1 |: This instruction allows you to tell the shell to make one stream got to the same destination as another stream. In this case, we’re saying “redirect stream 2, stderr, to the same destination that stream 1, stdout, is being redirected to. We then pipe that output into the next command.

grep -v “Permission denied”: use grep to filter the output with the “-v” flag which Inverts the sense of matching to select non-matching lines. Basically “show me everything BUT lines that contain Permission denied”...

Systemctl is the tool used to control the systemd init service. 

In ye olde tymes Linux used SysV as it’s init system to prepare user space after boot and ready the system for operation. Within the last decade a new init system was developed called systemd and basically took over every major Linux distribtution.

If we combine what we now know about SUID and systemd we can appreciate the red flag that goes up when we see those two things together. 

Our target system allows any logged in user to create a system service and run it as root! ...

[In the below example systemctl is exploited to pipe data from a file in the root directory to a file accessible to a standard user (a type of privilege escalation).

The commands to escalate privileges using systemctl is as follows:
$ eop=$(mktemp).service
$ echo ‘[Service]
> ExecStart=/bin/sh -c “cat /root/root.txt > /tmp/output”
> [Install]
> WantedBy=multi-user.target’ > $eop
$ /bin/systemctl link $eop
$ /bin/systemctl enable --now $eop
Here is the explanation of each command:]

eop=$(mktemp).service - we are creating an environment variable called “eop” (you can call it whatever you want). Within that variable we are calling the mktemp command to create a temporary file as a systemd service unit file (the “.service” part at the end)
...The problem [was] that our current logged-in user does not have permission to write to /etc/systemd/system where this would normally go. We get around that by echoing our unit file one line at a time into the env variable we just created.

echo ‘[Service] - calls the echo command to start echoing the input (notice the single quote? By not including the second single quote to close the line we are able to enter multiple single line inputs and complete our systemd unit file)

ExecStart=/bin/sh -c “cat /root/root.txt > /tmp/output” - when the service starts call the default system shell (the -c tells the shell to execute everything inside the quotes), use cat to display the contents of the root.txt file and output that to a file called output in the /tmp directory

[Install] - the second part of our unit file

WantedBy=multi-user.target’ > $eop - sets the state (or runlevel) at which this service will run (notice the closing single quote?), the > directs all our inputs to the eop env variable

/bin/systemctl link $eop - per the systemctl man page, this makes our unit file available for systemctl commands even though it is outside of the standard search paths

/bin/systemctl enable --now $eop - also per the systemctl man page “…Enable one or more units or unit instances. This will create a set of symlinks, as encoded in the "[Install]" sections of the indicated unit files. After the symlinks have been created, the system manager configuration is reloaded (in a way equivalent to daemon-reload), in order to ensure the changes are taken into account immediately. Note that this does not have the effect of also starting any of the units being enabled. If this is desired, combine this command with the --now switch…”

From here we check the output file we created and are greeted with the [data from the targeted file residing in the root directory]."
From: https://unicornsec.com/home/tryhackme-vulnversity
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
