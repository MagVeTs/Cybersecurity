Metasploit: Introduction
An introduction to the main components of the Metasploit Framework.
From: https://tryhackme.com/room/metasploitintro [with some editing]

"Metasploit is the most widely used exploitation framework. Metasploit is a powerful tool that can support all phases of a penetration testing engagement, from information gathering to post-exploitation.

Metasploit has two main versions:

Metasploit Pro: The commercial version that facilitates the automation and management of tasks. This version has a graphical user interface (GUI).
Metasploit Framework: The open-source version that works from the command line...

The Metasploit Framework is a set of tools that allow information gathering, scanning, exploitation, exploit development, post-exploitation, and more. While the primary usage of the Metasploit Framework focuses on the penetration testing domain, it is also useful for vulnerability research and exploit development.


The main components of the Metasploit Framework can be summarized as follows;

msfconsole: The main command-line interface.
Modules: supporting modules such as exploits, scanners, payloads, etc.
Tools: Stand-alone tools that will help vulnerability research, vulnerability assessment, or penetration testing. Some of these tools are msfvenom, pattern_create and pattern_offset. We will cover msfvenom within this module, but pattern_create and pattern_offset are tools useful in exploit development which is beyond the scope of this module.

While using the Metasploit Framework, you will primarily interact with the Metasploit console. You can launch it ... using the msfconsole command. The console will be your main interface to interact with the different modules of the Metasploit Framework. Modules are small components within the Metasploit framework that are built to perform a specific task, such as exploiting a vulnerability, scanning a target, or performing a brute-force attack.

Before diving into modules, it would be helpful to clarify a few recurring concepts: vulnerability, exploit, and payload.

Exploit: A piece of code that uses a vulnerability present on the target system.
Vulnerability: A design, coding, or logic flaw affecting the target system. The exploitation of a vulnerability can result in disclosing confidential information or allowing the attacker to execute code on the target system.
Payload: An exploit will take advantage of a vulnerability. However, if we want the exploit to have the result we want (gaining access to the target system, read confidential information, etc.), we need to use a payload. Payloads are the code that will run on the target system.

Modules and categories under each one are listed below. These are given for reference purposes, but you will interact with them through the Metasploit console (msfconsole).
- Auxiliary: Any supporting module, such as scanners, crawlers and fuzzers, can be found here.
- Encoders: Encoders will allow you to encode the exploit and payload in the hope that a signature-based antivirus solution may miss them.
Signature-based antivirus and security solutions have a database of known threats. They detect threats by comparing suspicious files to this database and raise an alert if there is a match. Thus encoders can have a limited success rate as antivirus solutions can perform additional checks.
- Evasion: While encoders will encode the payload, they should not be considered a direct attempt to evade antivirus software.
On the other hand, “evasion” modules will try that, with more or less success.
- Exploits: Exploits, neatly organized by target system.
- NOPs: NOPs (No OPeration) do nothing, literally.
They are represented in the Intel x86 CPU family they are represented with 0x90, following which the CPU will do nothing for one cycle. They are often used as a buffer to achieve consistent payload sizes.
- Payloads: Payloads are codes that will run on the target system.
Exploits will leverage a vulnerability on the target system, but to achieve the desired result, we will need a payload. Examples could be; getting a shell, loading     a malware or backdoor to the target system, running a command, or launching calc.exe as a proof of concept to add to the penetration test report. Starting the       calculator on the target system remotely by launching the calc.exe application is a benign way to show that we can run commands on the target system.
Running command on the target system is already an important step but having an interactive connection that allows you to type commands that will be executed on the target system is better. Such an interactive command line is called a "shell". Metasploit offers the ability to send different payloads that can open shells on the target system.
You will see three different directories under payloads: singles, stagers and stages.
1) Singles: Self-contained payloads (add user, launch notepad.exe, etc.) that do not need to download an additional component to run.
2) Stagers: Responsible for setting up a connection channel between Metasploit and the target system. Useful when working with staged payloads. “Staged payloads” will first upload a stager on the target system then download the rest of the payload (stage). This provides some advantages as the initial size of the payload will be relatively small compared to the full payload sent at once.
3) Stages: Downloaded by the stager. This will allow you to use larger sized payloads.
Metasploit has a subtle way to help you identify single (also called “inline”) payloads and staged payloads.
generic/shell_reverse_tcp
windows/x64/shell/reverse_tcp
Both are reverse Windows shells. The former is an inline (or single) payload, as indicated by the “_” between “shell” and “reverse”. While the latter is a staged payload, as indicated by the “/” between “shell” and “reverse”.
- Post: Post modules will be useful on the final stage of the penetration testing process listed above, post-exploitation.

If you wish to familiarize yourself further with these modules, you can find them under the modules folder of your Metasploit installation. 

As previously mentioned, the console will be your main interface to the Metasploit Framework. You can launch it using the msfconsole command on ... any system the Metasploit Framework is installed on.

Once launched, you will see the command line changes to msf5 (or msf6 depending on the installed version of Metasploit). The Metasploit console (msfconsole) can be used just like a regular command-line shell, as you can see below.

Note: remember always to check the msfconsole prompt to ensure you are in the right context. When dealing with Metasploit, you may see five different prompts:
1) The regular command prompt: You can not use Metasploit commands here (e.g. root@ip-10-10-XX-XX:~#)
2) The msfconsole prompt: msf5 (or msf6 depending on your installed version) is the msfconsole prompt. As you can see, no context is set here, so context-specific commands [about which we will learn later] to set parameters and run modules can not be used here. This prompt looks like: msf5 >
3)  A context prompt: Once you have decided to use a module and used the set command to chose it, the msfconsole will show the context. You can use context-specific commands (e.g. set RHOSTS 10.10.x.x) here. Example prompt: msf5 exploit(windows/smb/ms17_010_eternalblue) >
4) The Meterpreter prompt: Meterpreter is an important payload ... This means a Meterpreter agent was loaded to the target system and connected back to you. You can use Meterpreter specific commands here. This prompt looks like: meterpreter >
5) A shell on the target system: Once the exploit is completed, you may have access to a command shell on the target system. This is a regular command line, and all commands typed here run on the target system. This prompt looks like: C:\Windows\system32> (for a shell on a Windows system)


The first command [to learn] is 'ls' which lists the contents of the folder from which Metasploit was launched using the msfconsole command.

Another command is 'ping' sent to Google's DNS IP address (8.8.8.8). Since, you are using Linux you meed to add the -c 1 option, so only a single ping was sent. Otherwise, the ping process will continue until it is stopped using CTRL+C.

msfconsole will support most Linux commands, including 'clear' (to clear the terminal screen), but will not allow you to use some features of a regular command line (e.g. does not support output redirection) - so you cannot enter a command like: ls > ls.txt

The 'help' command can be used on its own (help) or for a specific command (e.g. help set)

You can use the 'history' command to see commands you have typed earlier.

An important feature of msfconsole is the support of tab completion ... For example, if you start typing he and press the tab key, you will see it auto-completes to help.

Msfconsole is managed by context; this means that unless set as a global variable, all parameter settings will be lost if you change the module you have decided to use. For example one might use the ms17_010_eternalblue exploit, and set parameters such as RHOSTS. If one were to then switch to another module (e.g. a port scanner), one would need to set the RHOSTS value again as all changes we have made remained in the context of the ms17_010_eternalblue exploit...

A module can be selected by typing use and the module name (e.g. use exploit/windows/smb/ms17_010_eternalblue)
or
The module to be used can also be selected with the use command followed by the number at the beginning of the search result line.

After choosing a module, the command line prompt will change to reflect that one is now in that module. For example, one might see:
msf6 exploit(windows/smb/ms17_010_eternalblue) >

Typing: 'show options', will print options related to the exploit we have chosen earlier. The show options command will have different outputs depending on the context it is used in. For example the eternalblue exploit will require we set variables like RHOSTS and RPORT. On the other hand, a post-exploitation module may only need us to set a SESSION ID ... A session is an existing connection to the target system that the post-exploitation module will use.
In other words, once you have entered the context of a module using the use command followed by the module name, as seen earlier, you will need to set parameters ... It is good practice to use the 'show options' command to list the required parameters.
All parameters are set using the same command syntax:
set PARAMETER_NAME VALUE
As mentioned the 'show options' command will list all available parameters.
Some of these parameters REQUIRE a value for the exploit to work (there will be a yes in the Required column) - some do not. Some required parameter values will be pre-populated, make sure you check if these should remain the same for your target. For example, a web exploit could have an RPORT (remote port: the port on the target system Metasploit will try to connect to and run the exploit) value preset to 80, but your target web application could be using port 8080. Again, set PARAMETER_NAME VALUE' will set the parameter. Once you have set a parameter, you can use the 'show options' command to check the value was set correctly.
Parameters you will often use are:
RHOSTS: “Remote host”, the IP address of the target system. A single IP address or a network range can be set. This will support the CIDR (Classless Inter-Domain Routing) notation (/24, /16, etc.) or a network range (10.10.10.x – 10.10.10.y). You can also use a file where targets are listed, one target per line using file:/path/of/the/target_file.txt.
RPORT: “Remote port”, the port on the target system the vulnerable application is running on.
PAYLOAD: The payload you will use with the exploit.
LHOST: “Localhost”, the attacking machine (your AttackBox or Kali Linux) IP address.
LPORT: “Local port”, the port you will use for the reverse shell to connect back to. This is a port on your attacking machine, and you can set it to any port not used by any other application.
SESSION: Each connection established to the target system using Metasploit will have a session ID. You will use this with post-exploitation modules that will connect to the target system using an existing connection.
You can override any set parameter using the 'set' command again with a different value. You can also clear any parameter value using the 'unset' command or clear all set parameters with the 'unset all' command.
You can use the 'setg' command to set values that will be used for all modules. The 'setg' command is used like the 'set' command. The difference is that if you use the 'set' command to set a value using a module and you switch to another module, you will need to set the value again. The 'setg' command allows you to set the value so it can be used by default across different modules. You can clear any value set with 'setg' using 'unsetg'. So, in other words: The 'setg' command sets a global value that will be used until you exit Metasploit or clear it using the 'unsetg' command.

Using modules
Once all module parameters are set, you can launch the module using the 'exploit' command. Metasploit also supports the 'run' command, which is an alias created for the 'exploit' command as the word exploit did not make sense when using modules that were not exploits (port scanners, vulnerability scanners, etc.).
The 'exploit' command can be used without any parameters or using the “-z” parameter.
The 'exploit -z' command will run the exploit and background the session as soon as it opens.
This will return you the context prompt from which you have run the exploit.
Some modules support the 'check' option. This will check if the target system is vulnerable without exploiting it.

Sessions
Once a vulnerability has been successfully exploited, a session will be created. This is the communication channel established between the target system and Metasploit.
You can use the 'background' command to background the session prompt and go back to the msfconsole prompt.
Alternatively, CTRL+Z can be used to background sessions.
The 'sessions' command can be used from the msfconsole prompt or any context to see the existing sessions along with their session numbers.
To interact with any session, you can use the sessions -i command followed by the desired session number.

The 'show' command can be used in any context followed by a module type (auxiliary, payload, exploit, etc.) to list available modules. 
If used from the msfconsole prompt, the 'show' command will list all modules.
The 'use' and 'show' options commands we have seen so far are identical for all modules in Metasploit.
You can leave the context you are in by using the 'back' command.

Further information on any module can be obtained by typing the 'info' command within its context.
Alternatively, you can use the 'info' command followed by the module’s path from the msfconsole prompt (e.g. info exploit/windows/smb/ms17_010_eternalblue). Info is not a help menu; it will display detailed information on the module such as its author, relevant sources, etc.

One of the most useful commands in msfconsole is 'search'. This command will search the Metasploit Framework database for modules relevant to the given search parameter. You can conduct searches using CVE numbers, exploit names (eternalblue, heartbleed, etc.), or target system - e.g. search ms17-010.
The output of the search command provides an overview of each returned module. You may notice the “name” column already gives more information than just the module name. You can see the type of module (auxiliary, exploit, etc.) and the category of the module (scanner, admin, windows, Unix, etc.). You can use any module returned in a search result with the command use followed by the number at the beginning of the result line.

Another essential piece of information returned is in the “rank” column. Exploits are rated based on their reliability. The table below provides their respective descriptions. Link to table: https://docs.metasploit.com/docs/using-metasploit/intermediate/exploit-ranking.html

You can direct the search function using keywords such as type and platform.
For example, if we wanted our search results to only include auxiliary modules, we could set the type to auxiliary:
msf6 > search type:auxiliary telnet

Please remember that exploits take advantage of a vulnerability on the target system and may always show unexpected behavior. A low-ranking exploit may work perfectly, and an excellent ranked exploit may not, or worse, crash the target system.

From: https://tryhackme.com/room/metasploitintro [with some editing]
------------------------------------------------------------------------------------
Metasploit: Exploitation
Using Metasploit for scanning, vulnerability assessment and exploitation.
From: https://tryhackme.com/room/metasploitexploitation

Port Scanning

Metasploit has a number of modules to scan open ports on the target system and network. You can list potential port scanning modules available using the 'search portscan' command.

Port scanning modules will require you to set a few options. After selecting a module type: 'show options'
example: msf6 auxiliary(scanner/portscan/tcp) > show options


