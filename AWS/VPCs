[from: https://tryhackme.com/room/attackingdefendingvpcs]

VPCs
-----
The AWS Virtual Private Cloud (VPC) is a software-defined network structure within an AWS account. It serves to segregate your network traffic from that of other AWS customers, offering a secure and isolated environment. Customers have the flexibility to define their CIDR ranges, establish connections between VPCs, and link VPCs to their on-premises networks.

VPCs are region-specific, necessitating the creation of a VPC in each region where VPC-based workloads are to be deployed. Upon the creation of a new AWS account, default VPCs are automatically provisioned in all standard regions, each utilizing the 172.31.0.0/16 CIDR Range. However, custom VPCs can employ any CIDR range, providing greater flexibility beyond RFC1918 CIDR ranges.

The VPC Dashboard conveniently displays all VPCs, enabling users to monitor VPC activity across different regions. Each VPC is assigned a unique identifier, known as the VPC ID, which starts with "vpc-" and is distinguishable across all AWS accounts. While newer VPC IDs are 17 characters long, older ones retain an eight-character format.

Networking within a VPC differs from traditional on-premises environments due to the software-defined and multi-tenant nature of the public cloud. In VPC environments, conventional networking protocols like ARP are not necessary for device discovery. Although ARP tables remain visible for compatibility with operating system networking stacks, common attack methods such as ARP Spoofing are ineffective within the VPC framework.

VPC Subnets
-----------
Virtual Private Clouds (VPCs) are comprised of Subnets, with each Subnet confined to a single Availability Zone (AZ). Subnets must adhere to CIDR ranges that are subsets of the VPC CIDR range, and their CIDR ranges cannot overlap.

Every VPC comes equipped with a VPC Router. As per AWS documentation, the VPC includes an implicit router, while route tables dictate the flow of network traffic. Each Subnet within the VPC must be linked to a route table, governing its routing (known as the subnet route table). Subnets can be explicitly associated with specific route tables, or they default to the main route table. Each Subnet can be linked to only one route table at a time, although multiple subnets can share the same subnet route table.

IGW and VGW
------------
VPCs feature two notable route destinations: the Internet Gateway (IGW) and the Virtual Private Gateway (VGW). The IGW serves as the interface between the VPC and the internet, while the VGW acts as the interface between the VPC and on-premises networks.

The terms "public subnet" and "private subnet" are often used in reference to VPC Subnets. However, AWS does not explicitly designate subnets as public or private. The distinction lies in how the route table directs traffic to the internet. A subnet with a direct route to the IGW is considered public, allowing resources within it with public IP addresses to be accessible from the internet. Conversely, subnets lacking public IP addresses and routes to the IGW are typically regarded as private. Even if a subnet automatically assigns public IP addresses to EC2 Instances, without a route to the IGW, those instances remain inaccessible from the internet.

In the context of security, attackers may manipulate the route table to reroute traffic to the IGW, potentially circumventing security measures.

Managed NAT Gateways
---------------------
AWS provides a service known as Managed NAT Gateways, which are EC2 Instances operated by AWS to facilitate Network Address Translation (NAT). This enables private subnets to connect to the internet. In a typical setup, you would direct traffic with a destination of 0.0.0.0/0 from your private subnet to the NAT Gateway. Meanwhile, for a public subnet, you would configure the route table to route traffic with a destination of 0.0.0.0/0 directly to the Internet Gateway (IGW).

NACLs
--------
Network Access Control Lists, abbreviated as NACLs, serve as a firewall mechanism within AWS's VPC framework. NACLs are applied at the subnet level and operate in a stateless manner, meaning both inbound and outbound traffic must be explicitly permitted. These lists offer either Allow or Deny actions, which are evaluated in a predetermined sequence. Unlike IAM, where an explicit Deny supersedes an explicit Allow, NACL rules are sequentially processed until a matching rule is found. By default, NACLs include a Deny All rule.

Due to their subnet-wide application, NACLs can have a significant impact if configured incorrectly, making them less commonly used compared to another form of network access control: security groups. In some cases, a central network security team will configure NACLs to block specific services without exceptions.

Security Groups
----------------
Security Groups, on the other hand, are associated with individual resources like EC2 Instances or RDS Databases. They exclusively support allowance rules and operate in a stateful manner, featuring distinct rule sets for inbound (Ingress) and outbound (Egress) traffic.

Security Groups serve as the primary method for managing network-level access to resources. They have the capability to reference either a CIDR range as a source or another Security Group ID. When a Security Group is referenced, any Elastic Network Interface (ENI) attached to that Security Group becomes a valid source for traffic.

Security Groups vs NACLs
-------------------------
Below is a table provided by AWS (https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Security.html#VPC_Security_Comparison) that outlines the distinctions between Security Groups and NACLs:

Security Group:
- Functions at the instance level.
- Exclusively supports allow rules.
- Operates in a stateful manner: Return traffic is automatically permitted, regardless of specific rules.
- All rules are assessed prior to determining traffic allowance.
- Applies to an instance only if the security group is designated during instance launch or later associated with the instance.

Network ACL:
- Functions at the subnet level.
- Supports both allow and deny rules.
- Operates in a stateless manner: Return traffic necessitates explicit allowance via rules.
- Rules are processed sequentially, beginning with the lowest numbered rule, to determine traffic allowance.
- Automatically applies to all instances within associated subnets, offering an additional layer of defense if security group rules are overly permissive.

Resource Location - Security Aspects
-------------------------------------
A crucial aspect of securing your AWS environment involves understanding the location of resourcesâ€”whether they reside inside or outside a Virtual Private Cloud (VPC). Examples of services within a VPC include EC2 Instances, RDS Databases, and data warehouses like RedShift. Conversely, S3 Buckets and the AWS NoSQL Database DynamoDB are examples of resources situated outside the VPC. Resources within a VPC can be safeguarded using NACLs and Security Groups, enabling control over direct access. Resources outside the VPC, however, rely solely on IAM for protection.

Elastic Network Interface (ENI) and Security Groups
----------------------------------------------------
Each resource within a VPC possesses an Elastic Network Interface (ENI) [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html], serving as a virtual network card within the VPC. ENIs can be attached to, detached from, and migrated between instances, often facilitating high-availability failover scenarios. Representing a DHCP lease from the VPC's DHCP server, ENIs may also feature a public IPv4 address if configured accordingly. While ENIs are associated with specific subnets, they can bridge an EC2 Instance across two subnets within the same availability zone.

Security Groups are linked to ENIs, providing a comprehensive view of VPC resources by listing all associated ENIs within an account. This information can be accessed via the EC2 Console or the AWS CLI Command, utilizing the following command:
$ aws ec2 describe-network-interfaces

VPC Endpoints and AWS PrivateLink
-----------------------------------
To facilitate communication between resources inside a VPC and specific resources outside the VPC, AWS provides two interconnected services: VPC Endpoints and AWS PrivateLink [https://aws.amazon.com/privatelink/?privatelink-blogs.sort-by=item.additionalFields.createdDate&privatelink-blogs.sort-order=desc]. These services empower network or security teams to restrict or entirely eliminate internet egress within a VPC.

Initially introduced alongside the Amazon S3 service, VPC Endpoints alleviate the need for machines in a private subnet to rely on a NatGateway for accessing S3. NatGateways impose a 1GB/s network limitation and can incur significant costs. Prior to VPC Endpoints, architects were compelled to expose machines requiring high-bandwidth operations to the internet to access S3. VPC Endpoints seamlessly integrate with S3 and DynamoDB.

To implement VPC Endpoints, a route must be added to the VPC Route Table. This route's destination is an abstract representation of the service, referred to as a Managed Prefix List [https://docs.aws.amazon.com/vpc/latest/userguide/managed-prefix-lists.html], rather than a specific CIDR Range.

AWS employs Prefix Lists to map AWS CIDR Ranges into your VPC, simplifying the management of public IP addresses without necessitating alterations to VPC Route tables or security groups. You can view the CIDR Ranges for various services using the command:
$ aws ec2 describe-prefix-lists

VPC Endpoints have the capability to utilize IAM to restrict their usage to particular S3 Buckets or DynamoDB Tables. Nevertheless, an attacker could exploit a VPC endpoint to illicitly transfer data from a VPC. They would accomplish this by adding a VPC endpoint and using it to exfiltrate data from the VPC into an S3 bucket that they control.

VPC PrivateLink functions as an Elastic Network Interface (ENI) within your VPC, linked to either an AWS Service or another AWS Customer. It serves as a means for AWS or its partners to deliver services to AWS customers without necessitating the allowance of traffic to the internet.

DNS
----
AWS offers several services that can handle DNS functionality within your VPC. By default, instances within the VPC utilize the Amazon-provided DNS server. This server is always located at the "base of the VPC IPv4 network range, plus two". For instance, if your VPC CIDR is 192.168.15.0/24, the default DNS server would be 192.168.15.2. The Amazon DNS server resolves all public DNS entries.

Alternatively, you can establish a Private Route53 HostedZone and associate it with the VPC. Route53 [https://aws.amazon.com/route53/] is Amazon's hosted DNS service, renowned for its high availability, global reach, and advanced health checks and failover capabilities. While Route53 will be discussed in more depth in future modules, it's important to understand that you can configure private DNS entries [https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zones-private.html] resolved by the Amazon DNS provider for instances within your VPC.

Moreover, the VPC's DNS server can be configured to handle requests from external networks, including on-premises networks, and to forward requests to on-premises DNS servers. However, it's crucial to recognize that DNS can serve as a potential lateral movement path, wherein compromising the cloud environment may lead to compromising corporate on-premises networks.

To enhance DNS security, you can configure the Route 53 Resolver DNS Firewall and enable Resolver Query Logging to CloudWatch Logs. The DNS Firewall enables you to specify which DNS domains instances within your VPC (and machines leveraging the Route53 Resolver on-premises) are permitted to query or prohibited from querying. This serves as a safeguard against DNS exfiltration attacks. Additionally, DNS Query logs allow you to analyze DNS activity through your Route53 Resolver via Security Information and Event Management (SIEM) systems for further threat analysis.

It's important to note that many advanced Route53 features incur additional costs, so it's crucial to be aware of any security-related charges you may be incurring.

Lastly, your VPC is configured to send DNS Logs to the log group "VPCResolverLogs," which can be accessed through the CloudWatch Logs Console. You can search through the entire Log Group using the orange "Search log group" box located in the upper right corner.










