------------------------------------------------------------------------
AWS CLI 
--------

------------------------------------------------------------------------
from: https://tryhackme.com/room/iamprincipals ; Task 5 - "Root User & AWS Account"
* IAM Users cannot see the root email address of the account they are in
* If the AWS Account is part of a greater AWS Organization the email of the Organization's Master Account can be found from the CLI:

> aws organizations describe-organization

------------------------------------------------------------------------
S3 syntax:

* aws s3 ls s3://<url> 
lists files in S3 bucket

* aws s3 cp s3://<url>/<file_to_be_copied> <file_name_to_create_on_your device>
copies files from S3 bucket to your device

add:
--profile <your_profile_name>
--no-sign-request [in order to access publicly accessible S3 buckets]
-------------------------------------------------------------------------

AWS Access Keys
[from: https://tryhackme.com/room/iamcredentials ; Task 5 - "AWS API Access Key"]

NOTE: the Access Key ID for Long Term Access Keys always begin with the string `AKIA`.

user@machine$ aws iam create-access-key --user-name student
# create Long Term AWS Access Key

user@machine$ aws iam update-access-key --access-key-id <AKIA...> --status Inactive
# deactivate Long Term AWS Access Key

user@machine$ aws iam update-access-key --access-key-id <AKIA...> --status Active
# reactivate Long Term AWS Access Key

user@machine$ aws iam delete-access-key --access-key-id <AKIA...>
# delete Long Term AWS Access Key

user@machine$ aws sts get-session-token
# create Temporary Session key

-------------------------------------------------------------------------
Reconnaissance
---------------

user@machine$ aws sts get-access-key-info --access-key-id <AKIA...>
# identify an AWS Account from an Access Key ID that was found somewhere (e.g. in a GitHub repository)
[from: https://tryhackme.com/room/iamcredentials ; Task 6 - "MFA in AWS and Best Practices around Credentials"]

user@machine$ aws iam list-virtual-mfa-devices
# check from within an account which users in the account have MFA enabled
[from: https://tryhackme.com/room/iamcredentials ; Task 6 - "MFA in AWS and Best Practices around Credentials"; hint to the 1st question]
-------------------------------------------------------------------------
Credentials
--------------
user@machine$ curl 169.254.170.2$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI
# to retrieve ECS Container's credentials; "$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI environment variable is populated if IAM Roles for Tasks is configured"
[from: https://tryhackme.com/room/iamcredentials ; Task 7 - "How services get credentials"]

user@machine$ curl $AWS_CONTAINER_CREDENTIALS_FULL_URI -H "X-aws-ec2-metadata-token: $AWS_CONTAINER_AUTHORIZATION_TOKEN" 
# get temporary credentials through CloudShell
[from: https://tryhackme.com/room/iamcredentials ; Task 7 - "How services get credentials"]

-------------------------------------------------------------------------
[from: https://tryhackme.com/room/stscredentialslab]

Creating a User; Adding the User to a Group; Creating an Access Key for the User by which the User can authenticate throught the AWS API


user@machine$ aws iam create-user --user-name <USER_NAME>
# create a user (AWS CloudShell CLI)

user@machine$ aws iam add-user-to-group --user-name <USER_NAME> --group-name <GROUP_NAME>
# add user to a group (AWS CloudShell CLI)

user@machine$ aws iam list-groups-for-user --user-name <USER_NAME>
# list groups to which a user belongs (AWS CloudShell CLI)

user@machine$ aws iam create-access-key --user-name <USER_NAME>
# create an Access Key for a user (AWS CloudShell CLI)

user@machine$ export AWS_SECRET_ACCESS_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
user@machine$ export AWS_ACCESS_KEY_ID=AKIA...
# these commands issued on the Attack Box allow it to connect to the associated AWS account using the AWS API

user@machine$ aws sts get-caller-identity
# this command issued on the Attack Box after inputting the AWS_SECRET_ACCESS_KEY and AWS_ACCESS_KEY_ID will return the current AWS IAM User (it is for AWS what `whoami` is for Linux)





