EC2
---

------------------------------------------------------------------------------------------------------------
Connecting to an EC2 to Administrate It
----------------------------------------

[from: https://tryhackme.com/room/amazonec2attackdefense ; Task 4 - "Connecting to your EC2 Instance"]

SSH 
----
- used from Linux machines; use public/private key pair created during creation of EC2
- NOTE: best security practice is to place EC2 server in private subnet without public IP address. In such cases, in order to connect using SSH from another device one would first set up a proxy jump host that is tunneled to the EC2 and has a public IP, then one would connect to the EC2 by way of the jump host. Another option is to set up a VPN.

RDP
----
- used from Windows machines
- the SSH Key is needed to decrypt the Administrator Password; this is then used to sign in using RDP (Remote Desktop Protocol)

EC2 Connect
------------
- a newer AWS service called EC2 Instance Connect can be used
- it is a browser-based ssh interface 
- it uses temporary SSH public/private key pairs deployed by an agent using AWS IAM Permissions.


AWS SSM
-------

EC2 Serial Console
-------------------

Summary of the major ways to connect to an EC2 Instance
Method	        Requires Direct Network Access	Requires Agent	Requires EC2 IAM Permissions
Direct SSH/RDP	          YES	                        NO	                    NO
EC2 Instance Connect	    YES	                        YES                     NO
                                              (Installed on amazon linux2)	    
SSM Run Command	           NO	                        YES	                    YES
SSM Session Manager	       NO	                        YES	                    YES
EC2 Serial Console	       NO	                        NO                      NO
                                         (but users must have a password set)
------------------------------------------------------------------------------------------------------------

EC2 instances connecting to services using Instance MetaDataService (IMDS)
[from: https://tryhackme.com/room/amazonec2attackdefense ; Task 5 - "Instance Permissions"]


- EC2 instances can connect to services using IMDS which listens on 169.254.169.254 and is a component of AWS Hypervisor
CLI commands using EC2 Instance Console to connect to the instance and work with its IMDS:

user@machine$ role_name=$( curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/ )
user@machine$ echo "Role Name is $role_name"
# gets the role name; stores role name in environment variable role_name; and echoes out role name

user@machine$ curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/${role_name}
# request session credentials for role

user@machine$ instance_id=$( curl -s http://169.254.169.254/latest/meta-data/instance-id )
user@machine$ echo "My Instance ID is $instance_id"
user@machine$ aws ec2 modify-instance-metadata-options --instance-id $instance_id --http-tokens required --region us-east-1
# enable IMDSv2 (safer than IMDSv1); require token to call instance metadata

user@machine$ TOKEN=`curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`
user@machine$ echo $TOKEN
# get the token; token set for 21,600 seconds = 6 hours

user@machine$ role_name=$( curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/iam/security-credentials/ )
user@machine$ echo "Role Name is $role_name"
user@machine$ curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/iam/security-credentials/${role_name}
# get credentials
# `-H "X-aws-ec2-metadata-token: $TOKEN"` = "adds a custom header to your HTTP call. This makes it much more difficult to leverage standard SSRF exploits to access and exfiltrate AWS credentials via the IMDS."
------------------------------------------------------------------------------------------------------------












