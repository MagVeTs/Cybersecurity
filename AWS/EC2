EC2
---

------------------------------------------------------------------------------------------------------------
Connecting to an EC2 to Administrate It
----------------------------------------

[from: https://tryhackme.com/room/amazonec2attackdefense ; Task 4 - "Connecting to your EC2 Instance"]

SSH 
----
- used from Linux machines; use public/private key pair created during creation of EC2
- NOTE: best security practice is to place EC2 server in private subnet without public IP address. In such cases, in order to connect using SSH from another device one would first set up a proxy jump host that is tunneled to the EC2 and has a public IP, then one would connect to the EC2 by way of the jump host. Another option is to set up a VPN.

RDP
----
- used from Windows machines
- the SSH Key is needed to decrypt the Administrator Password; this is then used to sign in using RDP (Remote Desktop Protocol)

EC2 Connect
------------
- a newer AWS service called EC2 Instance Connect can be used
- it is a browser-based ssh interface 
- it uses temporary SSH public/private key pairs deployed by an agent using AWS IAM Permissions.


AWS SSM
-------

EC2 Serial Console
-------------------

Summary of the major ways to connect to an EC2 Instance
Method	        Requires Direct Network Access	Requires Agent	Requires EC2 IAM Permissions
Direct SSH/RDP	          YES	                        NO	                    NO
EC2 Instance Connect	    YES	                        YES                     NO
                                              (Installed on amazon linux2)	    
SSM Run Command	           NO	                        YES	                    YES
SSM Session Manager	       NO	                        YES	                    YES
EC2 Serial Console	       NO	                        NO                      NO
                                         (but users must have a password set)
------------------------------------------------------------------------------------------------------------

EC2 instances connecting to services using Instance MetaDataService (IMDS)
[from: https://tryhackme.com/room/amazonec2attackdefense ; Task 5 - "Instance Permissions"]


- EC2 instances can connect to services using IMDS which listens on 169.254.169.254 and is a component of AWS Hypervisor
CLI commands using EC2 Instance Console to connect to the instance and work with its IMDS:

user@machine$ role_name=$( curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/ )
user@machine$ echo "Role Name is $role_name"
# gets the role name; stores role name in environment variable role_name; and echoes out role name

user@machine$ curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/${role_name}
# request session credentials for role

user@machine$ instance_id=$( curl -s http://169.254.169.254/latest/meta-data/instance-id )
user@machine$ echo "My Instance ID is $instance_id"
user@machine$ aws ec2 modify-instance-metadata-options --instance-id $instance_id --http-tokens required --region us-east-1
# enable IMDSv2 (safer than IMDSv1); require token to call instance metadata

user@machine$ TOKEN=`curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`
user@machine$ echo $TOKEN
# get the token; token set for 21,600 seconds = 6 hours

user@machine$ role_name=$( curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/iam/security-credentials/ )
user@machine$ echo "Role Name is $role_name"
user@machine$ curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/iam/security-credentials/${role_name}
# get credentials
# `-H "X-aws-ec2-metadata-token: $TOKEN"` = "adds a custom header to your HTTP call. This makes it much more difficult to leverage standard SSRF exploits to access and exfiltrate AWS credentials via the IMDS."
------------------------------------------------------------------------------------------------------------
[from: https://tryhackme.com/room/amazonec2attackdefense ; Task 6 - "EC2 Networking & Storage"]

EC2 Networking
---------------
 * EC2 Networking makes use of the Elastic Network Interface (ENI)
* Each EC2 Instances has an ENI ; it is possible to configure multiple ENIs for an instance (used as a network device between two subnets, to add network capacity, or to provide a failover)
* Each ENI has at least one Security Group to define what IP source addresses, ports, and protocols may communicate with ENI
* By AWS Network Security default EC2's can only recieve traffic addressed to their IP; they can only send traffic originating in their IP; in order to use an EC2 as NAT/firewall/router disable this default check of source/destination

[in: AWS CLI / CloudShell]
$ aws ec2 describe-network-interfaces | jq '.NetworkInterfaces[0]'
# helps understand netwotk topology outputs info re network interfaced; e.g. public IP, Private IP, and name/ID of Security Group, Subnet, and VPC

------------------------------------------------------------------------------------------------------------
[from: https://tryhackme.com/room/amazonec2attackdefense ; Task 6 - "EC2 Networking & Storage"]

EC2 Storage
------------
* Amazon Elastic Block Store (EBS) provides hard disk storage for EC2 Instances
* hard disks are called EBS Volumes and may be SSD, HDD, or IOPS; available capacity: 1GB - 64TB
* EBS Volumes provide snapshotting; used for backup and sharing; EBS Snapshots stored in Amazon S3 Buckets to save money
* some types of EC2 instances can have ephemeral storage; these use SSD drives present in the device; ephemeral storage automatically erased on reboot; snapshots cannot be stored on ephemeral storage
* both EBS Volumes and Snapshots are able to be encrypted; different types of KMS Encryption is available
* EBS Snapshots able to be shared across AWS Accounts 
* Note: danger exists that they may contain sensitive data, source code, or secrets

CLI commands to:
1) grab a public EBS Snapshot
2) use it to create an EBS Volume
3) mount the EBS Volume to an EC2 instance
4) the volume can now be accessed and searched for secrets

[in: AWS CLI / CloudShell
$ aws ec2 describe-snapshots --snapshot-ids <SNAPSHOT_ID_NUMBER(s)>
# gather info about a discovered snaoshot; e.g. encryption, volume size, AWS account in which it was created

[in: EC2 Instance Console]
$  TOKEN=`curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`
$ curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/placement/availability-zone
# discover Availability Zone (AZ) of instance (this is a subcategory of Region); this is needed for the next step (creating the volume) because volumes must be in the same AZ as the machine they are mounted to

[in: EC2 Instance Console]
$ aws ec2 create-volume --snapshot-id <SNAPSHOT_ID_NUMBER> --volume-type gp3 --region <REPLACE-WITH-REGION> --availability-zone <REPLACE-WITH-AZ>
# create volume from snapshot
# gp3 was chosen for `--volume-type` because it is cheap
# make sure to note volume-ID in output in order to use it for the next step

[in: EC2 Instance Console]
$ instance_id=$( curl  -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/instance-id )
$ aws ec2 attach-volume --region <REPLACE-WITH-REGION> --device /dev/sdh --instance-id $instance_id --volume-id vol-REPLACE-WITH-YOUR-VOLUME_ID>

[in: EC2 Instance Console]
$ sudo fdisk -l
# check on new volume; output includes size of volume and name (e.g. /dev/nvme0n1p1)

[in: EC2 Instance Console]
$ sudo mkdir /snapshot-recovery
$ sudo mount /dev/nvme1n1 /snapshot-recovery
# mount new volume (in this case called: /dev/nvme1n1)

[in: EC2 Instance Console]
$ ls /snapshot-recovery
# now the volume can be searched for secrets
------------------------------------------------------------------------------------------------------------
[from: https://tryhackme.com/room/amazonec2attackdefense ; Task 7 - "EC2 Configuration"]


[command issued from CloudShell]
$ aws ec2 describe-images --owners 019181489476
# see a list of Amazon Machine Images (AMIs) available to your account that were configured by the 019181489476 (TryHackme AWS Development) account
# omitting the `--owners` flag will pull a list of all available AMI's - which will be too big to handle and will time out

------------------------------------------------------------------------------------------------------------
[from: https://tryhackme.com/room/amazonec2attackdefense ; Task 7 - "EC2 Configuration"]

EC2 instances can be configured using UserData (which may contain secrets).
The UserData can be accessed within an instance by going to:
/var/lib/cloud/instance/scripts/part-001
as root (sudo or su)

Another way to access the UserData of an instance is to connect to it using EC2 Instance Connect or the SSM Session Manager and to issue the following commands:

[commands issued from EC2 Instance Connect or the SSM Session Manager]
$  TOKEN=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
$  instance_id=$( curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/instance-id )
$  aws ec2 describe-instance-attribute --attribute userData --instance-id $instance_id --region us-east-1 --query UserData --output text  | base64 -d
#  takes output of `describe-instance-attribute` call; pulls UserData field (--query UserData); pipes through base64 decode to make readable the shell script
------------------------------------------------------------------------------------------------------------







